openapi: '3.0.0'
info:
  version: 1.1.1
  title: DEA Case API
paths:
  # root resource path entity must match the file name or the documentation will not get attached to the right API Gateweay resource
  # (e.g. openapi-auth.yml must only contain '/auth' and all child APIs)
  /cases:
    post:
      tags:
        - cases
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCaseObject'
      responses:
        200:
          description: Case successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Case'
  /cases/my-cases:
    get:
      summary: get user's cases
      description: returns array of cases on which the user has membership
      tags:
        - cases
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: next
          schema:
            type: string
      responses:
        200:
          description: Success Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  cases:
                    type: object
                    items:
                      $ref: '#/components/schemas/MyCases'
                  next:
                    type: string
  /cases/all-cases:
    get:
      summary: Get all cases
      description: admin-only returns list of cases
      tags:
        - elevated
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: next
          schema:
            type: string
      responses:
        200:
          description: Success Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  cases:
                    type: object
                    items:
                      $ref: '#/components/schemas/Cases'
                  next:
                    type: string
  /cases/{caseId}/owner:
    post:
      summary: Set new owner of a case
      description: Admin-only set new owner of a case
      tags:
        - elevated
      parameters:
        - in: path
          name: caseId
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - caseId
              properties:
                userId:
                  type: string
                caseId:
                  type: string
      responses:
        200:
          description: Case owner set successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/CaseUser'
  /cases/{caseId}/scopedInformation:
    get:
      summary: Return scoped information on case by Case Id
      description: Get specific set case details. Intended for evidence managers and admins
      tags:
        - elevated
      parameters:
        - in: path
          name: caseId
          schema:
            type: string
          required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ScopedCase'
  /cases/{caseId}/userMemberships:
    post:
      summary: Add a user as a collaborator to a case
      tags:
        - cases
      parameters:
        - in: path
          name: caseId
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaseUserRequest'
      responses:
        200:
          description: Case membership created
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/CaseUser'
    get:
      summary: Get all users by case
      description: get all users with membership on a case
      tags:
        - cases
      parameters:
        - in: path
          name: caseId
          schema:
            type: string
          required: true
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: next
          schema:
            type: string
      responses:
        200:
          description: Success Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  cases:
                    type: array
                    items:
                      $ref: '#/components/schemas/CaseUsers'
                  next:
                    type: string
  /cases/{caseId}/users/{userId}/memberships:
    put:
      summary: Update case user
      description: Update the details on an existing case membership
      tags:
        - cases
      parameters:
        - in: path
          name: caseId
          schema:
            type: string
          required: true
        - in: path
          name: userId
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaseUserRequest'
      responses:
        200:
          description: Case user successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseUser'
    delete:
      summary: Remove case user
      description: Remove a collaborator from a case
      tags:
        - cases
      parameters:
        - in: path
          name: caseId
          schema:
            type: string
          required: true
        - in: path
          name: userId
          schema:
            type: string
          required: true
      responses:
        204:
          description: No content, delete successful
  /cases/{caseId}/actions:
    get:
      summary: Return case actions available to user by case Id
      description: Get user for case and their available actions
      tags:
        - cases
      parameters:
        - in: path
          name: caseId
          schema:
            type: string
          required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseUser'
  /cases/{caseId}/details:
    get:
      summary: Return case details by case Id
      description: Get metadata for a specific case. return not found if user doesnâ€™t have access
      tags:
        - cases
      parameters:
        - in: path
          name: caseId
          schema:
            type: string
          required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Case'
    put:
      summary: Update case details
      tags:
        - cases
      parameters:
        - in: path
          name: caseId
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaseUpdateRequest'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Case'
    delete:
      summary: Delete case
      tags:
        - elevated
      parameters:
        - in: path
          name: caseId
          schema:
            type: string
          required: true
      responses:
        200:
          description: Success
  /cases/{caseId}/status:
    put:
      summary: Update case status and optionally request deletion of case files
      tags:
        - cases
      parameters:
        - in: path
          name: caseId
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                deleteFiles:
                  type: boolean
                  default: false
                status:
                  $ref: '#/components/schemas/CaseStatus'
      responses:
        200:
          description: Successfully updated case
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Case'
  /cases/{caseId}/files:
    post:
      summary: Begin case file upload
      tags:
        - cases
      parameters:
        - in: path
          name: caseId
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaseFileInitiateUpload'
      responses:
        200:
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseUploadResponse'
    get:
      summary: list files by directory
      description: List files within a case in given file path or case root
      tags:
        - cases
      parameters:
        - in: path
          name: caseId
          schema:
            type: string
          required: true
        - in: query
          name: filePath
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: next
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  caseFiles:
                    type: array
                    items:
                      $ref: '#/components/schemas/CaseFiles'
                  next:
                    type: string
  /cases/{caseId}/files/{fileId}/info:
    get:
      summary: File details
      description: Get details for a file within a case
      tags:
        - cases
      parameters:
        - in: path
          name: caseId
          schema:
            type: string
          required: true
        - in: path
          name: fileId
          schema:
            type: string
          required: true
      responses:
        200:
          description: Success Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  caseId:
                    type: string
                  file:
                    $ref: '#/components/schemas/CaseFile'
  /cases/{caseId}/files/{fileId}/contents:
    post:
      summary: Download file
      description: Download the contents of a file via s3 signed url
      tags:
        - cases
      parameters:
        - in: path
          name: caseId
          schema:
            type: string
          required: true
        - in: path
          name: fileId
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - caseUlid
                - ulid
                - downloadReason
              properties:
                caseUlid:
                  type: string
                ulid:
                  type: string
                downloadReason:
                  type: string
      responses:
        200:
          description: Success Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  isArchived:
                    type: boolean
                  isRestoring:
                    type: boolean
                  downloadUrl:
                    type: string
                    format: uri
                  downloadReason:
                    type: string
    put:
      summary: Complete case file upload
      tags:
        - cases
      parameters:
        - in: path
          name: caseId
          schema:
            type: string
          required: true
        - in: path
          name: fileId
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaseFileCompleteUpload'
      responses:
        200:
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompleteCaseFileUploadResponse'
  /cases/{caseId}/files/{fileId}/restore:
    put:
      summary: Restore archived file
      description: Restore archived file by moving it to frequent access tier (if archived in intelligent-tier) or creating a restored copy (if archived in glacier)
      tags:
        - cases
      parameters:
        - in: path
          name: caseId
          schema:
            type: string
          required: true
        - in: path
          name: fileId
          schema:
            type: string
          required: true
      responses:
        204:
          description: No content, restore successful
  /cases/{caseId}/files/{fileId}/audit:
    post:
      summary: Generates audit log for a file
      operationId: requestCaseFileAudit
      tags:
        - audit
      parameters:
        - name: caseId
          in: path
          description: Case ID to generate audit log for
          required: true
          schema:
            type: string
        - name: fileId
          in: path
          description: File ID to generate audit log for
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuditPayload'
      responses:
        '200':
          description: Audit Query ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  auditId:
                    type: string
  /cases/{caseId}/files/{fileId}/audit/{auditId}/csv:
    get:
      summary: Returns audit log for a specific file by file ID, case ID, and audit log ID
      operationId: getCaseFileAudit
      tags:
        - audit
      parameters:
        - name: caseId
          in: path
          description: Case ID to return audit log entries for
          required: true
          schema:
            type: string
        - name: fileId
          in: path
          description: File ID to return audit log entries for
          required: true
          schema:
            type: string
        - name: auditId
          in: path
          description: Audit log ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Audit log CSV result and status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditResult'
  /cases/{caseId}/audit:
    post:
      summary: Generates audit log for case ID
      operationId: requestCaseAudit
      tags:
        - audit
      parameters:
        - name: caseId
          in: path
          description: Case ID for which to generate audit log
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuditPayload'
      responses:
        '200':
          description: Audit Query ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  auditId:
                    type: string
  /cases/{caseId}/audit/{auditId}/csv:
    get:
      summary: Returns audit log by audit log ID and case ID
      operationId: getCaseAudit
      tags:
        - audit
      parameters:
        - name: caseId
          in: path
          description: Case ID to return audit log for
          required: true
          schema:
            type: string
        - name: auditId
          in: path
          description: Audit log ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Audit log CSV result and status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditResult'

components:
  schemas:
    Case:
      type: object
      properties:
        ulid:
          type: string
        name:
          type: string
        status:
          $ref: '#/components/schemas/CaseStatus'
        description:
          type: string
        objectCount:
          type: number
        totalSizeBytes:
          type: number
        status:
          $ref: '#/components/schemas/CaseFileStatus'
        s3BatchJobId:
          type: string
        created:
          type: string
        updated:
          type: string
    Cases:
      type: array
      items:
        $ref: '#/components/schemas/Case'
    MyCase:
      allOf:
        - $ref: '#/components/schemas/Case'
        - type: object
          properties:
            actions:
              type: array
              items:
                $ref: '#/components/schemas/CaseAction'
    MyCases:
      type: array
      items:
        $ref: '#/components/schemas/MyCase'
    ScopedCase:
      type: object
      properties:
        ulid:
          type: string
        name:
          type: string
    CaseUpdateRequest:
      type: object
      required:
        - ulid
        - name
      properties:
        ulid:
          type: string
        name:
          type: string
        description:
          type: string
    CreateCaseObject:
      type: object
      required:
        - name
        - status
      properties:
        name:
          type: string
          example: Cookie Stealing
        description:
          type: string
          example: Suspecting cookie monster stole all the cookies
        status:
          type: string
          example: ACTIVE
    CaseUser:
      type: object
      properties:
        userUlid:
          type: string
        caseUlid:
          type: string
        actions:
          type: array
          items:
            $ref: '#/components/schemas/CaseAction'
        caseName:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        created:
          type: string
        updated:
          type: string
    CaseUsers:
      type: array
      items:
        $ref: '#/components/schemas/CaseUser'
    CaseUserRequest:
      type: object
      required:
        - userUlid
        - caseUlid
        - actions
      properties:
        userUlid:
          type: string
        caseUlid:
          type: string
        actions:
          type: array
          items:
            $ref: '#/components/schemas/CaseAction'
    CaseFileCompleteUpload:
      type: object
      required:
        - caseUlid
        - ulid
        - uploadId
      properties:
        caseUlid:
          type: string
        ulid:
          type: string
        uploadId:
          type: string
    CaseFileInitiateUpload:
      type: object
      required:
        - caseUlid
        - fileName
        - filePath
        - contentType
        - fileSizeBytes
      properties:
        fileName:
          type: string
        filePath:
          type: string
        caseUlid:
          type: string
        fileSizeBytes:
          type: number
        details:
          type: string
        reason:
          type: string
        contentType:
          type: string
        uploadId:
          type: string
    CaseFile:
      type: object
      properties:
        fileName:
          type: string
        filePath:
          type: string
        caseUlid:
          type: string
        contentType:
          type: string
        createdBy:
          type: string
        fileSizeBytes:
          type: number
        sha256Hash:
          type: string
        ulid:
          type: string
        status:
          $ref: '#/components/schemas/CaseFileStatus'
        uploadId:
          type: string
        isFile:
          type: boolean
        reason:
          type: string
        details:
          type: string
        fileS3Key:
          type: string
        dataVaultUlid:
          type: string
        executionId:
          type: string
        associationCreatedBy:
          type: string
        associationDate:
          type: string
        dataVaultUploadDate:
          type: string
        dataVaultName:
          type: string
        created:
          type: string
        updated:
          type: string
    CaseFiles:
      type: array
      items:
        $ref: '#/components/schemas/CaseFile'
    CaseUploadResponse:
      allOf:
        - $ref: '#/components/schemas/CaseFile'
        - type: object
          properties:
            federationCredentials:
              type: string
            bucket:
              type: string
            region:
              type: string
    CompleteCaseFileUploadResponse:
      allOf:
        - $ref: '#/components/schemas/CaseFile'
        - type: object
          properties:
            ttl:
              type: number
    AuditResult:
      type: object
      properties:
        status:
          type: string
          items:
            $ref: '#/components/schemas/QueryStatus'
        downloadUrl:
          type: string
    AuditPayload:
      type: object
      properties:
        from:
          type: number
        to:
          type: number
    QueryStatus:
      type: string
      enum: [Cancelled, Complete, Failed, Running, Scheduled, Timeout, Unknown]

    User:
      type: object
      properties:
        ulid:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        lowerFirstName:
          type: string
        lowerLastName:
          type: string
    Users:
      type: array
      items:
        $ref: '#/components/schemas/User'

    CaseAction:
      type: string
      enum:
        [
          VIEW_CASE_DETAILS,
          UPDATE_CASE_DETAILS,
          UPDATE_CASE_STATUS,
          UPLOAD,
          DOWNLOAD,
          VIEW_FILES,
          CASE_AUDIT,
          INVITE,
          RESTORE,
        ]
    CaseStatus:
      type: string
      enum: [ACTIVE, INACTIVE]
    CaseFileStatus:
      type: string
      enum: [ACTIVE, DELETING, DELETE_FAILED, DELETED, PENDING]
