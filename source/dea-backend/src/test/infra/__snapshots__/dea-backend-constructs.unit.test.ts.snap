// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DeaBackend constructs synthesizes the way we expect 1`] = `
Object {
  "Outputs": Object {
    "DeaBackendConstructDeaS3AccessLogs327B4237": Object {
      "Export": Object {
        "Name": "[STAGE-REMOVED]-DeaS3AccessLogs",
      },
      "Value": Object {
        "Ref": "DeaBackendConstructS3AccessLogsBucket2074272F",
      },
    },
    "DeaBackendConstructDeaS3DatasetsF44ADC66": Object {
      "Export": Object {
        "Name": "[STAGE-REMOVED]-DeaS3Datasets",
      },
      "Value": Object {
        "Ref": "DeaBackendConstructS3DatasetsBucketDDF4C58A",
      },
    },
    "DeaRestApiConstructdeaApiUrlB03CD416": Object {
      "Export": Object {
        "Name": "[STAGE-REMOVED]-deaApiUrl",
      },
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Ref": "DeaRestApiConstructdeaapi6587DDA1",
            },
            ".execute-api.",
            Object {
              "Ref": "AWS::Region",
            },
            ".",
            Object {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            Object {
              "Ref": "DeaRestApiConstructdeaapiDeploymentStage[STAGE-REMOVED][HASH REMOVED]",
            },
            "/",
          ],
        ],
      },
    },
    "DeaRestApiConstructdeaapiEndpoint5DCD0FC9": Object {
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Ref": "DeaRestApiConstructdeaapi6587DDA1",
            },
            ".execute-api.",
            Object {
              "Ref": "AWS::Region",
            },
            ".",
            Object {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            Object {
              "Ref": "DeaRestApiConstructdeaapiDeploymentStage[STAGE-REMOVED][HASH REMOVED]",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": Object {
      "DependsOn": Array [
        "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[HASH REMOVED].zip",
        },
        "Description": Object {
          "Fn::Join": Array [
            "",
            Array [
              "Lambda function for auto-deleting objects in ",
              Object {
                "Ref": "DeaBackendConstructS3AccessLogsBucket2074272F",
              },
              " S3 bucket.",
            ],
          ],
        },
        "Handler": "__entrypoint__.handler",
        "MemorySize": 128,
        "Role": Object {
          "Fn::GetAtt": Array [
            "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Sub": "arn:\${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DeaAuditdeaTrailBucket4819FF43": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "KMSMasterKeyID": Object {
                  "Fn::GetAtt": Array [
                    "testKey1CDDDD5E",
                    "Arn",
                  ],
                },
                "SSEAlgorithm": "aws:kms",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": Array [
          Object {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true",
          },
        ],
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "DeaAuditdeaTrailBucketAutoDeleteObjectsCustomResourceA4FC66B6": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "DeaAuditdeaTrailBucketPolicyA68DF945",
      ],
      "Properties": Object {
        "BucketName": Object {
          "Ref": "DeaAuditdeaTrailBucket4819FF43",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3AutoDeleteObjects",
      "UpdateReplacePolicy": "Delete",
    },
    "DeaAuditdeaTrailBucketPolicyA68DF945": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "DeaAuditdeaTrailBucket4819FF43",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "DeaAuditdeaTrailBucket4819FF43",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "DeaAuditdeaTrailBucket4819FF43",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::GetAtt": Array [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn",
                  ],
                },
              },
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "DeaAuditdeaTrailBucket4819FF43",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "DeaAuditdeaTrailBucket4819FF43",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "s3:GetBucketAcl",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "cloudtrail.amazonaws.com",
              },
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "DeaAuditdeaTrailBucket4819FF43",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "s3:PutObject",
              "Condition": Object {
                "StringEquals": Object {
                  "s3:x-amz-acl": "bucket-owner-full-control",
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "Service": "cloudtrail.amazonaws.com",
              },
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "DeaAuditdeaTrailBucket4819FF43",
                        "Arn",
                      ],
                    },
                    "/AWSLogs/",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    "/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "DeaBackendConstructDeaTableB48721A0": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "PK",
            "AttributeType": "S",
          },
          Object {
            "AttributeName": "SK",
            "AttributeType": "S",
          },
          Object {
            "AttributeName": "GSI1PK",
            "AttributeType": "S",
          },
          Object {
            "AttributeName": "GSI1SK",
            "AttributeType": "S",
          },
          Object {
            "AttributeName": "GSI2PK",
            "AttributeType": "S",
          },
          Object {
            "AttributeName": "GSI2SK",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "GlobalSecondaryIndexes": Array [
          Object {
            "IndexName": "GSI1",
            "KeySchema": Array [
              Object {
                "AttributeName": "GSI1PK",
                "KeyType": "HASH",
              },
              Object {
                "AttributeName": "GSI1SK",
                "KeyType": "RANGE",
              },
            ],
            "Projection": Object {
              "ProjectionType": "ALL",
            },
          },
          Object {
            "IndexName": "GSI2",
            "KeySchema": Array [
              Object {
                "AttributeName": "GSI2PK",
                "KeyType": "HASH",
              },
              Object {
                "AttributeName": "GSI2SK",
                "KeyType": "RANGE",
              },
            ],
            "Projection": Object {
              "ProjectionType": "ALL",
            },
          },
        ],
        "KeySchema": Array [
          Object {
            "AttributeName": "PK",
            "KeyType": "HASH",
          },
          Object {
            "AttributeName": "SK",
            "KeyType": "RANGE",
          },
        ],
        "PointInTimeRecoverySpecification": Object {
          "PointInTimeRecoveryEnabled": true,
        },
        "SSESpecification": Object {
          "KMSMasterKeyId": Object {
            "Fn::GetAtt": Array [
              "testKey1CDDDD5E",
              "Arn",
            ],
          },
          "SSEEnabled": true,
          "SSEType": "KMS",
        },
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Delete",
    },
    "DeaBackendConstructS3AccessLogsBucket2074272F": Object {
      "DeletionPolicy": "Delete",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W35",
              "reason": "This is an access log bucket, we don't need to configure access logging for access log buckets",
            },
          ],
        },
      },
      "Properties": Object {
        "AccessControl": "LogDeliveryWrite",
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": Array [
          Object {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true",
          },
        ],
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "DeaBackendConstructS3AccessLogsBucketAutoDeleteObjectsCustomResource6EDC2642": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "DeaBackendConstructS3AccessLogsBucketPolicy55BD9984",
      ],
      "Properties": Object {
        "BucketName": Object {
          "Ref": "DeaBackendConstructS3AccessLogsBucket2074272F",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3AutoDeleteObjects",
      "UpdateReplacePolicy": "Delete",
    },
    "DeaBackendConstructS3AccessLogsBucketPolicy55BD9984": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "DeaBackendConstructS3AccessLogsBucket2074272F",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "DeaBackendConstructS3AccessLogsBucket2074272F",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "DeaBackendConstructS3AccessLogsBucket2074272F",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::GetAtt": Array [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn",
                  ],
                },
              },
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "DeaBackendConstructS3AccessLogsBucket2074272F",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "DeaBackendConstructS3AccessLogsBucket2074272F",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "s3:PutObject",
              "Condition": Object {
                "StringEquals": Object {
                  "aws:SourceAccount": Object {
                    "Ref": "AWS::AccountId",
                  },
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "Service": "logging.s3.amazonaws.com",
              },
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "DeaBackendConstructS3AccessLogsBucket2074272F",
                          "Arn",
                        ],
                      },
                      "/dea-ui-access-log*",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "DeaBackendConstructS3AccessLogsBucket2074272F",
                          "Arn",
                        ],
                      },
                      "/dea-datasets-access-log*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "DeaBackendConstructS3DatasetsBucketAutoDeleteObjectsCustomResource5386F212": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "DeaBackendConstructS3DatasetsBucketPolicyA1DF7E5A",
      ],
      "Properties": Object {
        "BucketName": Object {
          "Ref": "DeaBackendConstructS3DatasetsBucketDDF4C58A",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3AutoDeleteObjects",
      "UpdateReplacePolicy": "Delete",
    },
    "DeaBackendConstructS3DatasetsBucketDDF4C58A": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "BucketKeyEnabled": true,
              "ServerSideEncryptionByDefault": Object {
                "KMSMasterKeyID": Object {
                  "Fn::GetAtt": Array [
                    "testKey1CDDDD5E",
                    "Arn",
                  ],
                },
                "SSEAlgorithm": "aws:kms",
              },
            },
          ],
        },
        "LifecycleConfiguration": Object {
          "Rules": Array [
            Object {
              "AbortIncompleteMultipartUpload": Object {
                "DaysAfterInitiation": 1,
              },
              "Id": "DeaDatasetsDeleteIncompleteUploadsLifecyclePolicy",
              "Status": "Enabled",
            },
          ],
        },
        "LoggingConfiguration": Object {
          "DestinationBucketName": Object {
            "Ref": "DeaBackendConstructS3AccessLogsBucket2074272F",
          },
          "LogFilePrefix": "dea-datasets-access-log",
        },
        "ObjectLockEnabled": true,
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": Array [
          Object {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true",
          },
        ],
        "VersioningConfiguration": Object {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "DeaBackendConstructS3DatasetsBucketPolicyA1DF7E5A": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "DeaBackendConstructS3DatasetsBucketDDF4C58A",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "DeaBackendConstructS3DatasetsBucketDDF4C58A",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "DeaBackendConstructS3DatasetsBucketDDF4C58A",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::GetAtt": Array [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn",
                  ],
                },
              },
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "DeaBackendConstructS3DatasetsBucketDDF4C58A",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "DeaBackendConstructS3DatasetsBucketDDF4C58A",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "DeaRestApiConstructAPIGatewayAccessLogs56D13F5D": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "KmsKeyId": Object {
          "Fn::GetAtt": Array [
            "testKey1CDDDD5E",
            "Arn",
          ],
        },
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "DeaRestApiConstructDELETEcaseIdE0E7560F": Object {
      "DependsOn": Array [
        "DeaRestApiConstructdeabaselambdaroleDefaultPolicy8449FBB9",
        "DeaRestApiConstructdeabaselambdarole9EA2B06B",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "AWSCustomResource Lambda Function has AWSLambdaBasicExecutionRole policy attached which has the required permission to write to Cloudwatch Logs",
            },
            Object {
              "id": "W92",
              "reason": "Reserved concurrency is currently not required. Revisit in the future",
            },
            Object {
              "id": "W89",
              "reason": "The serverless application lens (https://docs.aws.amazon.com/wellarchitected/latest/serverless-applications-lens/aws-lambda.html)               indicates lambdas should not be deployed in private VPCs unless they require acces to resources also within a VPC",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[HASH REMOVED].zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AUDIT_LOG_GROUP_NAME": Object {
              "Ref": "deaAuditLogs7B75D3F1",
            },
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATASETS_BUCKET_NAME": Object {
              "Ref": "DeaBackendConstructS3DatasetsBucketDDF4C58A",
            },
            "NODE_OPTIONS": "--enable-source-maps",
            "STAGE": "[STAGE-REMOVED]",
            "TABLE_NAME": Object {
              "Ref": "DeaBackendConstructDeaTableB48721A0",
            },
          },
        },
        "Handler": "index.handler",
        "MemorySize": 512,
        "Role": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeabaselambdarole9EA2B06B",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DeaRestApiConstructDELETEuserId97F2887D": Object {
      "DependsOn": Array [
        "DeaRestApiConstructdeabaselambdaroleDefaultPolicy8449FBB9",
        "DeaRestApiConstructdeabaselambdarole9EA2B06B",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "AWSCustomResource Lambda Function has AWSLambdaBasicExecutionRole policy attached which has the required permission to write to Cloudwatch Logs",
            },
            Object {
              "id": "W92",
              "reason": "Reserved concurrency is currently not required. Revisit in the future",
            },
            Object {
              "id": "W89",
              "reason": "The serverless application lens (https://docs.aws.amazon.com/wellarchitected/latest/serverless-applications-lens/aws-lambda.html)               indicates lambdas should not be deployed in private VPCs unless they require acces to resources also within a VPC",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[HASH REMOVED].zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AUDIT_LOG_GROUP_NAME": Object {
              "Ref": "deaAuditLogs7B75D3F1",
            },
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATASETS_BUCKET_NAME": Object {
              "Ref": "DeaBackendConstructS3DatasetsBucketDDF4C58A",
            },
            "NODE_OPTIONS": "--enable-source-maps",
            "STAGE": "[STAGE-REMOVED]",
            "TABLE_NAME": Object {
              "Ref": "DeaBackendConstructDeaTableB48721A0",
            },
          },
        },
        "Handler": "index.handler",
        "MemorySize": 512,
        "Role": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeabaselambdarole9EA2B06B",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DeaRestApiConstructGETallcases490E3EC5": Object {
      "DependsOn": Array [
        "DeaRestApiConstructdeabaselambdaroleDefaultPolicy8449FBB9",
        "DeaRestApiConstructdeabaselambdarole9EA2B06B",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "AWSCustomResource Lambda Function has AWSLambdaBasicExecutionRole policy attached which has the required permission to write to Cloudwatch Logs",
            },
            Object {
              "id": "W92",
              "reason": "Reserved concurrency is currently not required. Revisit in the future",
            },
            Object {
              "id": "W89",
              "reason": "The serverless application lens (https://docs.aws.amazon.com/wellarchitected/latest/serverless-applications-lens/aws-lambda.html)               indicates lambdas should not be deployed in private VPCs unless they require acces to resources also within a VPC",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[HASH REMOVED].zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AUDIT_LOG_GROUP_NAME": Object {
              "Ref": "deaAuditLogs7B75D3F1",
            },
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATASETS_BUCKET_NAME": Object {
              "Ref": "DeaBackendConstructS3DatasetsBucketDDF4C58A",
            },
            "NODE_OPTIONS": "--enable-source-maps",
            "STAGE": "[STAGE-REMOVED]",
            "TABLE_NAME": Object {
              "Ref": "DeaBackendConstructDeaTableB48721A0",
            },
          },
        },
        "Handler": "index.handler",
        "MemorySize": 512,
        "Role": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeabaselambdarole9EA2B06B",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DeaRestApiConstructGETbyeD5063377": Object {
      "DependsOn": Array [
        "DeaRestApiConstructdeabaselambdaroleDefaultPolicy8449FBB9",
        "DeaRestApiConstructdeabaselambdarole9EA2B06B",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "AWSCustomResource Lambda Function has AWSLambdaBasicExecutionRole policy attached which has the required permission to write to Cloudwatch Logs",
            },
            Object {
              "id": "W92",
              "reason": "Reserved concurrency is currently not required. Revisit in the future",
            },
            Object {
              "id": "W89",
              "reason": "The serverless application lens (https://docs.aws.amazon.com/wellarchitected/latest/serverless-applications-lens/aws-lambda.html)               indicates lambdas should not be deployed in private VPCs unless they require acces to resources also within a VPC",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[HASH REMOVED].zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AUDIT_LOG_GROUP_NAME": Object {
              "Ref": "deaAuditLogs7B75D3F1",
            },
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATASETS_BUCKET_NAME": Object {
              "Ref": "DeaBackendConstructS3DatasetsBucketDDF4C58A",
            },
            "NODE_OPTIONS": "--enable-source-maps",
            "STAGE": "[STAGE-REMOVED]",
            "TABLE_NAME": Object {
              "Ref": "DeaBackendConstructDeaTableB48721A0",
            },
          },
        },
        "Handler": "index.handler",
        "MemorySize": 512,
        "Role": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeabaselambdarole9EA2B06B",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DeaRestApiConstructGETcaseId3B128BAD": Object {
      "DependsOn": Array [
        "DeaRestApiConstructdeabaselambdaroleDefaultPolicy8449FBB9",
        "DeaRestApiConstructdeabaselambdarole9EA2B06B",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "AWSCustomResource Lambda Function has AWSLambdaBasicExecutionRole policy attached which has the required permission to write to Cloudwatch Logs",
            },
            Object {
              "id": "W92",
              "reason": "Reserved concurrency is currently not required. Revisit in the future",
            },
            Object {
              "id": "W89",
              "reason": "The serverless application lens (https://docs.aws.amazon.com/wellarchitected/latest/serverless-applications-lens/aws-lambda.html)               indicates lambdas should not be deployed in private VPCs unless they require acces to resources also within a VPC",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[HASH REMOVED].zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AUDIT_LOG_GROUP_NAME": Object {
              "Ref": "deaAuditLogs7B75D3F1",
            },
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATASETS_BUCKET_NAME": Object {
              "Ref": "DeaBackendConstructS3DatasetsBucketDDF4C58A",
            },
            "NODE_OPTIONS": "--enable-source-maps",
            "STAGE": "[STAGE-REMOVED]",
            "TABLE_NAME": Object {
              "Ref": "DeaBackendConstructDeaTableB48721A0",
            },
          },
        },
        "Handler": "index.handler",
        "MemorySize": 512,
        "Role": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeabaselambdarole9EA2B06B",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DeaRestApiConstructGEThi76A71F55": Object {
      "DependsOn": Array [
        "DeaRestApiConstructdeabaselambdaroleDefaultPolicy8449FBB9",
        "DeaRestApiConstructdeabaselambdarole9EA2B06B",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "AWSCustomResource Lambda Function has AWSLambdaBasicExecutionRole policy attached which has the required permission to write to Cloudwatch Logs",
            },
            Object {
              "id": "W92",
              "reason": "Reserved concurrency is currently not required. Revisit in the future",
            },
            Object {
              "id": "W89",
              "reason": "The serverless application lens (https://docs.aws.amazon.com/wellarchitected/latest/serverless-applications-lens/aws-lambda.html)               indicates lambdas should not be deployed in private VPCs unless they require acces to resources also within a VPC",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[HASH REMOVED].zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AUDIT_LOG_GROUP_NAME": Object {
              "Ref": "deaAuditLogs7B75D3F1",
            },
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATASETS_BUCKET_NAME": Object {
              "Ref": "DeaBackendConstructS3DatasetsBucketDDF4C58A",
            },
            "NODE_OPTIONS": "--enable-source-maps",
            "STAGE": "[STAGE-REMOVED]",
            "TABLE_NAME": Object {
              "Ref": "DeaBackendConstructDeaTableB48721A0",
            },
          },
        },
        "Handler": "index.handler",
        "MemorySize": 512,
        "Role": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeabaselambdarole9EA2B06B",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DeaRestApiConstructGETidToken48065721": Object {
      "DependsOn": Array [
        "DeaRestApiConstructdeabaselambdaroleDefaultPolicy8449FBB9",
        "DeaRestApiConstructdeabaselambdarole9EA2B06B",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "AWSCustomResource Lambda Function has AWSLambdaBasicExecutionRole policy attached which has the required permission to write to Cloudwatch Logs",
            },
            Object {
              "id": "W92",
              "reason": "Reserved concurrency is currently not required. Revisit in the future",
            },
            Object {
              "id": "W89",
              "reason": "The serverless application lens (https://docs.aws.amazon.com/wellarchitected/latest/serverless-applications-lens/aws-lambda.html)               indicates lambdas should not be deployed in private VPCs unless they require acces to resources also within a VPC",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[HASH REMOVED].zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AUDIT_LOG_GROUP_NAME": Object {
              "Ref": "deaAuditLogs7B75D3F1",
            },
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATASETS_BUCKET_NAME": Object {
              "Ref": "DeaBackendConstructS3DatasetsBucketDDF4C58A",
            },
            "NODE_OPTIONS": "--enable-source-maps",
            "STAGE": "[STAGE-REMOVED]",
            "TABLE_NAME": Object {
              "Ref": "DeaBackendConstructDeaTableB48721A0",
            },
          },
        },
        "Handler": "index.handler",
        "MemorySize": 512,
        "Role": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeabaselambdarole9EA2B06B",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DeaRestApiConstructGETmycasesF570E0D9": Object {
      "DependsOn": Array [
        "DeaRestApiConstructdeabaselambdaroleDefaultPolicy8449FBB9",
        "DeaRestApiConstructdeabaselambdarole9EA2B06B",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "AWSCustomResource Lambda Function has AWSLambdaBasicExecutionRole policy attached which has the required permission to write to Cloudwatch Logs",
            },
            Object {
              "id": "W92",
              "reason": "Reserved concurrency is currently not required. Revisit in the future",
            },
            Object {
              "id": "W89",
              "reason": "The serverless application lens (https://docs.aws.amazon.com/wellarchitected/latest/serverless-applications-lens/aws-lambda.html)               indicates lambdas should not be deployed in private VPCs unless they require acces to resources also within a VPC",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[HASH REMOVED].zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AUDIT_LOG_GROUP_NAME": Object {
              "Ref": "deaAuditLogs7B75D3F1",
            },
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATASETS_BUCKET_NAME": Object {
              "Ref": "DeaBackendConstructS3DatasetsBucketDDF4C58A",
            },
            "NODE_OPTIONS": "--enable-source-maps",
            "STAGE": "[STAGE-REMOVED]",
            "TABLE_NAME": Object {
              "Ref": "DeaBackendConstructDeaTableB48721A0",
            },
          },
        },
        "Handler": "index.handler",
        "MemorySize": 512,
        "Role": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeabaselambdarole9EA2B06B",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DeaRestApiConstructGETusersDD8AA5AF": Object {
      "DependsOn": Array [
        "DeaRestApiConstructdeabaselambdaroleDefaultPolicy8449FBB9",
        "DeaRestApiConstructdeabaselambdarole9EA2B06B",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "AWSCustomResource Lambda Function has AWSLambdaBasicExecutionRole policy attached which has the required permission to write to Cloudwatch Logs",
            },
            Object {
              "id": "W92",
              "reason": "Reserved concurrency is currently not required. Revisit in the future",
            },
            Object {
              "id": "W89",
              "reason": "The serverless application lens (https://docs.aws.amazon.com/wellarchitected/latest/serverless-applications-lens/aws-lambda.html)               indicates lambdas should not be deployed in private VPCs unless they require acces to resources also within a VPC",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[HASH REMOVED].zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AUDIT_LOG_GROUP_NAME": Object {
              "Ref": "deaAuditLogs7B75D3F1",
            },
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATASETS_BUCKET_NAME": Object {
              "Ref": "DeaBackendConstructS3DatasetsBucketDDF4C58A",
            },
            "NODE_OPTIONS": "--enable-source-maps",
            "STAGE": "[STAGE-REMOVED]",
            "TABLE_NAME": Object {
              "Ref": "DeaBackendConstructDeaTableB48721A0",
            },
          },
        },
        "Handler": "index.handler",
        "MemorySize": 512,
        "Role": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeabaselambdarole9EA2B06B",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DeaRestApiConstructPOSTauthCode8A1B1E18": Object {
      "DependsOn": Array [
        "DeaRestApiConstructdeabaselambdaroleDefaultPolicy8449FBB9",
        "DeaRestApiConstructdeabaselambdarole9EA2B06B",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "AWSCustomResource Lambda Function has AWSLambdaBasicExecutionRole policy attached which has the required permission to write to Cloudwatch Logs",
            },
            Object {
              "id": "W92",
              "reason": "Reserved concurrency is currently not required. Revisit in the future",
            },
            Object {
              "id": "W89",
              "reason": "The serverless application lens (https://docs.aws.amazon.com/wellarchitected/latest/serverless-applications-lens/aws-lambda.html)               indicates lambdas should not be deployed in private VPCs unless they require acces to resources also within a VPC",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[HASH REMOVED].zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AUDIT_LOG_GROUP_NAME": Object {
              "Ref": "deaAuditLogs7B75D3F1",
            },
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATASETS_BUCKET_NAME": Object {
              "Ref": "DeaBackendConstructS3DatasetsBucketDDF4C58A",
            },
            "NODE_OPTIONS": "--enable-source-maps",
            "STAGE": "[STAGE-REMOVED]",
            "TABLE_NAME": Object {
              "Ref": "DeaBackendConstructDeaTableB48721A0",
            },
          },
        },
        "Handler": "index.handler",
        "MemorySize": 512,
        "Role": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeabaselambdarole9EA2B06B",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DeaRestApiConstructPOSTcases71FC396B": Object {
      "DependsOn": Array [
        "DeaRestApiConstructdeabaselambdaroleDefaultPolicy8449FBB9",
        "DeaRestApiConstructdeabaselambdarole9EA2B06B",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "AWSCustomResource Lambda Function has AWSLambdaBasicExecutionRole policy attached which has the required permission to write to Cloudwatch Logs",
            },
            Object {
              "id": "W92",
              "reason": "Reserved concurrency is currently not required. Revisit in the future",
            },
            Object {
              "id": "W89",
              "reason": "The serverless application lens (https://docs.aws.amazon.com/wellarchitected/latest/serverless-applications-lens/aws-lambda.html)               indicates lambdas should not be deployed in private VPCs unless they require acces to resources also within a VPC",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[HASH REMOVED].zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AUDIT_LOG_GROUP_NAME": Object {
              "Ref": "deaAuditLogs7B75D3F1",
            },
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATASETS_BUCKET_NAME": Object {
              "Ref": "DeaBackendConstructS3DatasetsBucketDDF4C58A",
            },
            "NODE_OPTIONS": "--enable-source-maps",
            "STAGE": "[STAGE-REMOVED]",
            "TABLE_NAME": Object {
              "Ref": "DeaBackendConstructDeaTableB48721A0",
            },
          },
        },
        "Handler": "index.handler",
        "MemorySize": 512,
        "Role": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeabaselambdarole9EA2B06B",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DeaRestApiConstructPOSTfilesD0E72419": Object {
      "DependsOn": Array [
        "DeaRestApiConstructdeabaselambdaroleDefaultPolicy8449FBB9",
        "DeaRestApiConstructdeabaselambdarole9EA2B06B",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "AWSCustomResource Lambda Function has AWSLambdaBasicExecutionRole policy attached which has the required permission to write to Cloudwatch Logs",
            },
            Object {
              "id": "W92",
              "reason": "Reserved concurrency is currently not required. Revisit in the future",
            },
            Object {
              "id": "W89",
              "reason": "The serverless application lens (https://docs.aws.amazon.com/wellarchitected/latest/serverless-applications-lens/aws-lambda.html)               indicates lambdas should not be deployed in private VPCs unless they require acces to resources also within a VPC",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[HASH REMOVED].zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AUDIT_LOG_GROUP_NAME": Object {
              "Ref": "deaAuditLogs7B75D3F1",
            },
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATASETS_BUCKET_NAME": Object {
              "Ref": "DeaBackendConstructS3DatasetsBucketDDF4C58A",
            },
            "NODE_OPTIONS": "--enable-source-maps",
            "STAGE": "[STAGE-REMOVED]",
            "TABLE_NAME": Object {
              "Ref": "DeaBackendConstructDeaTableB48721A0",
            },
          },
        },
        "Handler": "index.handler",
        "MemorySize": 512,
        "Role": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeabaselambdarole9EA2B06B",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DeaRestApiConstructPOSTuserMembershipsA9A79B32": Object {
      "DependsOn": Array [
        "DeaRestApiConstructdeabaselambdaroleDefaultPolicy8449FBB9",
        "DeaRestApiConstructdeabaselambdarole9EA2B06B",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "AWSCustomResource Lambda Function has AWSLambdaBasicExecutionRole policy attached which has the required permission to write to Cloudwatch Logs",
            },
            Object {
              "id": "W92",
              "reason": "Reserved concurrency is currently not required. Revisit in the future",
            },
            Object {
              "id": "W89",
              "reason": "The serverless application lens (https://docs.aws.amazon.com/wellarchitected/latest/serverless-applications-lens/aws-lambda.html)               indicates lambdas should not be deployed in private VPCs unless they require acces to resources also within a VPC",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[HASH REMOVED].zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AUDIT_LOG_GROUP_NAME": Object {
              "Ref": "deaAuditLogs7B75D3F1",
            },
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATASETS_BUCKET_NAME": Object {
              "Ref": "DeaBackendConstructS3DatasetsBucketDDF4C58A",
            },
            "NODE_OPTIONS": "--enable-source-maps",
            "STAGE": "[STAGE-REMOVED]",
            "TABLE_NAME": Object {
              "Ref": "DeaBackendConstructDeaTableB48721A0",
            },
          },
        },
        "Handler": "index.handler",
        "MemorySize": 512,
        "Role": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeabaselambdarole9EA2B06B",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DeaRestApiConstructPUTcaseId804DFA77": Object {
      "DependsOn": Array [
        "DeaRestApiConstructdeabaselambdaroleDefaultPolicy8449FBB9",
        "DeaRestApiConstructdeabaselambdarole9EA2B06B",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "AWSCustomResource Lambda Function has AWSLambdaBasicExecutionRole policy attached which has the required permission to write to Cloudwatch Logs",
            },
            Object {
              "id": "W92",
              "reason": "Reserved concurrency is currently not required. Revisit in the future",
            },
            Object {
              "id": "W89",
              "reason": "The serverless application lens (https://docs.aws.amazon.com/wellarchitected/latest/serverless-applications-lens/aws-lambda.html)               indicates lambdas should not be deployed in private VPCs unless they require acces to resources also within a VPC",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[HASH REMOVED].zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AUDIT_LOG_GROUP_NAME": Object {
              "Ref": "deaAuditLogs7B75D3F1",
            },
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATASETS_BUCKET_NAME": Object {
              "Ref": "DeaBackendConstructS3DatasetsBucketDDF4C58A",
            },
            "NODE_OPTIONS": "--enable-source-maps",
            "STAGE": "[STAGE-REMOVED]",
            "TABLE_NAME": Object {
              "Ref": "DeaBackendConstructDeaTableB48721A0",
            },
          },
        },
        "Handler": "index.handler",
        "MemorySize": 512,
        "Role": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeabaselambdarole9EA2B06B",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DeaRestApiConstructPUTfileId8DA844F1": Object {
      "DependsOn": Array [
        "DeaRestApiConstructdeabaselambdaroleDefaultPolicy8449FBB9",
        "DeaRestApiConstructdeabaselambdarole9EA2B06B",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "AWSCustomResource Lambda Function has AWSLambdaBasicExecutionRole policy attached which has the required permission to write to Cloudwatch Logs",
            },
            Object {
              "id": "W92",
              "reason": "Reserved concurrency is currently not required. Revisit in the future",
            },
            Object {
              "id": "W89",
              "reason": "The serverless application lens (https://docs.aws.amazon.com/wellarchitected/latest/serverless-applications-lens/aws-lambda.html)               indicates lambdas should not be deployed in private VPCs unless they require acces to resources also within a VPC",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[HASH REMOVED].zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AUDIT_LOG_GROUP_NAME": Object {
              "Ref": "deaAuditLogs7B75D3F1",
            },
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATASETS_BUCKET_NAME": Object {
              "Ref": "DeaBackendConstructS3DatasetsBucketDDF4C58A",
            },
            "NODE_OPTIONS": "--enable-source-maps",
            "STAGE": "[STAGE-REMOVED]",
            "TABLE_NAME": Object {
              "Ref": "DeaBackendConstructDeaTableB48721A0",
            },
          },
        },
        "Handler": "index.handler",
        "MemorySize": 512,
        "Role": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeabaselambdarole9EA2B06B",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DeaRestApiConstructPUTuserId248180A2": Object {
      "DependsOn": Array [
        "DeaRestApiConstructdeabaselambdaroleDefaultPolicy8449FBB9",
        "DeaRestApiConstructdeabaselambdarole9EA2B06B",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "AWSCustomResource Lambda Function has AWSLambdaBasicExecutionRole policy attached which has the required permission to write to Cloudwatch Logs",
            },
            Object {
              "id": "W92",
              "reason": "Reserved concurrency is currently not required. Revisit in the future",
            },
            Object {
              "id": "W89",
              "reason": "The serverless application lens (https://docs.aws.amazon.com/wellarchitected/latest/serverless-applications-lens/aws-lambda.html)               indicates lambdas should not be deployed in private VPCs unless they require acces to resources also within a VPC",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[HASH REMOVED].zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AUDIT_LOG_GROUP_NAME": Object {
              "Ref": "deaAuditLogs7B75D3F1",
            },
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DATASETS_BUCKET_NAME": Object {
              "Ref": "DeaBackendConstructS3DatasetsBucketDDF4C58A",
            },
            "NODE_OPTIONS": "--enable-source-maps",
            "STAGE": "[STAGE-REMOVED]",
            "TABLE_NAME": Object {
              "Ref": "DeaBackendConstructDeaTableB48721A0",
            },
          },
        },
        "Handler": "index.handler",
        "MemorySize": 512,
        "Role": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeabaselambdarole9EA2B06B",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DeaRestApiConstructdeaapi6587DDA1": Object {
      "Properties": Object {
        "Description": "Backend API",
        "EndpointConfiguration": Object {
          "Types": Array [
            "REGIONAL",
          ],
        },
        "Name": "dea-api",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "DeaRestApiConstructdeaapiAccount1E82C2B3": Object {
      "DeletionPolicy": "Retain",
      "DependsOn": Array [
        "DeaRestApiConstructdeaapi6587DDA1",
      ],
      "Properties": Object {
        "CloudWatchRoleArn": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeaapiCloudWatchRole49932FD9",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "DeaRestApiConstructdeaapiCloudWatchRole49932FD9": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "DeaRestApiConstructdeaapiDEAUsagePlanBC29ADF7": Object {
      "Properties": Object {
        "ApiStages": Array [
          Object {
            "ApiId": Object {
              "Ref": "DeaRestApiConstructdeaapi6587DDA1",
            },
            "Stage": Object {
              "Ref": "DeaRestApiConstructdeaapiDeploymentStage[STAGE-REMOVED][HASH REMOVED]",
            },
            "Throttle": Object {},
          },
        ],
        "Throttle": Object {
          "BurstLimit": 50,
          "RateLimit": 25,
        },
        "UsagePlanName": "dea-usage-plan",
      },
      "Type": "AWS::ApiGateway::UsagePlan",
    },
    "DeaRestApiConstructdeaapiDeploymentC27C6CB1391e99194881f8405e4268ca222bc10b": Object {
      "DependsOn": Array [
        "DeaRestApiConstructdeaapiauthgetCredentialsidTokenGETF30F6BC2",
        "DeaRestApiConstructdeaapiauthgetCredentialsidTokenOPTIONSA66044D9",
        "DeaRestApiConstructdeaapiauthgetCredentialsidToken81FDE330",
        "DeaRestApiConstructdeaapiauthgetCredentialsOPTIONS6F2C55DF",
        "DeaRestApiConstructdeaapiauthgetCredentials162DF0F2",
        "DeaRestApiConstructdeaapiauthgetTokenauthCodeOPTIONS7DF32090",
        "DeaRestApiConstructdeaapiauthgetTokenauthCodePOST3DCF3F52",
        "DeaRestApiConstructdeaapiauthgetTokenauthCode1D020E3A",
        "DeaRestApiConstructdeaapiauthgetTokenOPTIONS914E22A0",
        "DeaRestApiConstructdeaapiauthgetTokenF874EF26",
        "DeaRestApiConstructdeaapiauthOPTIONSF807407C",
        "DeaRestApiConstructdeaapiauthE4846931",
        "DeaRestApiConstructdeaapibyeGET3BEB4A0A",
        "DeaRestApiConstructdeaapibyeOPTIONS00A7A259",
        "DeaRestApiConstructdeaapibye9DFF71B3",
        "DeaRestApiConstructdeaapicasescaseIdDELETEE13D0EAA",
        "DeaRestApiConstructdeaapicasescaseIdfilesfileIdOPTIONS0739484E",
        "DeaRestApiConstructdeaapicasescaseIdfilesfileIdPUTDD763A2A",
        "DeaRestApiConstructdeaapicasescaseIdfilesfileId71AE0C3F",
        "DeaRestApiConstructdeaapicasescaseIdfilesOPTIONS18C09E02",
        "DeaRestApiConstructdeaapicasescaseIdfilesPOST6C02B6FD",
        "DeaRestApiConstructdeaapicasescaseIdfilesC98413A7",
        "DeaRestApiConstructdeaapicasescaseIdGET31A0ADCB",
        "DeaRestApiConstructdeaapicasescaseIdOPTIONS28A51954",
        "DeaRestApiConstructdeaapicasescaseIdPUTDAF01FBF",
        "DeaRestApiConstructdeaapicasescaseId5919A5AE",
        "DeaRestApiConstructdeaapicasescaseIduserMembershipsuserIdDELETE5C89D30D",
        "DeaRestApiConstructdeaapicasescaseIduserMembershipsuserIdOPTIONS2A768A43",
        "DeaRestApiConstructdeaapicasescaseIduserMembershipsuserIdPUTC33F61E0",
        "DeaRestApiConstructdeaapicasescaseIduserMembershipsuserId13BB910A",
        "DeaRestApiConstructdeaapicasescaseIduserMembershipsOPTIONS8FB7464B",
        "DeaRestApiConstructdeaapicasescaseIduserMembershipsPOST84A13ED4",
        "DeaRestApiConstructdeaapicasescaseIduserMembershipsD5C1FDF3",
        "DeaRestApiConstructdeaapicasesallcasesGET3D7FE7B4",
        "DeaRestApiConstructdeaapicasesallcasesOPTIONSA5C611C6",
        "DeaRestApiConstructdeaapicasesallcases5A486593",
        "DeaRestApiConstructdeaapicasesmycasesGETC5597167",
        "DeaRestApiConstructdeaapicasesmycasesOPTIONSE1C2DE04",
        "DeaRestApiConstructdeaapicasesmycases5E6BEFAC",
        "DeaRestApiConstructdeaapicasesOPTIONS6C23822B",
        "DeaRestApiConstructdeaapicasesPOST0A7C65AB",
        "DeaRestApiConstructdeaapicasesC2FD1C2B",
        "DeaRestApiConstructdeaapihiGETDB467AC2",
        "DeaRestApiConstructdeaapihiOPTIONSEFEA6225",
        "DeaRestApiConstructdeaapihi7D1B234E",
        "DeaRestApiConstructdeaapiOPTIONSE2FADC9C",
        "DeaRestApiConstructdeaapiusersGET45E97005",
        "DeaRestApiConstructdeaapiusersOPTIONS8F715BE6",
        "DeaRestApiConstructdeaapiusers95152658",
      ],
      "Properties": Object {
        "Description": "Backend API",
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "DeaRestApiConstructdeaapiDeploymentStage[STAGE-REMOVED][HASH REMOVED]": Object {
      "DependsOn": Array [
        "DeaRestApiConstructdeaapiAccount1E82C2B3",
      ],
      "Properties": Object {
        "AccessLogSetting": Object {
          "DestinationArn": Object {
            "Fn::GetAtt": Array [
              "DeaRestApiConstructAPIGatewayAccessLogs56D13F5D",
              "Arn",
            ],
          },
          "Format": "{\\"stage\\":\\"$context.stage\\",\\"requestId\\":\\"$context.requestId\\",\\"integrationRequestId\\":\\"$context.integration.requestId\\",\\"status\\":\\"$context.status\\",\\"apiId\\":\\"$context.apiId\\",\\"resourcePath\\":\\"$context.resourcePath\\",\\"path\\":\\"$context.path\\",\\"resourceId\\":\\"$context.resourceId\\",\\"httpMethod\\":\\"$context.httpMethod\\",\\"sourceIp\\":\\"$context.identity.sourceIp\\",\\"userAgent\\":\\"$context.identity.userAgent\\"}",
        },
        "DeploymentId": Object {
          "Ref": "DeaRestApiConstructdeaapiDeploymentC27C6CB1391e99194881f8405e4268ca222bc10b",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
        "StageName": "[STAGE-REMOVED]",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "DeaRestApiConstructdeaapiOPTIONSE2FADC9C": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": Object {
          "IntegrationResponses": Array [
            Object {
              "ResponseParameters": Object {
                "method.response.header.Access-Control-Allow-Credentials": "'true'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,CSRF-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST,PUT,PATCH,DELETE'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": Object {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": Array [
          Object {
            "ResponseParameters": Object {
              "method.response.header.Access-Control-Allow-Credentials": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeaapi6587DDA1",
            "RootResourceId",
          ],
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapiauthE4846931": Object {
      "Properties": Object {
        "ParentId": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeaapi6587DDA1",
            "RootResourceId",
          ],
        },
        "PathPart": "auth",
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "DeaRestApiConstructdeaapiauthOPTIONSF807407C": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": Object {
          "IntegrationResponses": Array [
            Object {
              "ResponseParameters": Object {
                "method.response.header.Access-Control-Allow-Credentials": "'true'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,CSRF-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST,PUT,PATCH,DELETE'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": Object {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": Array [
          Object {
            "ResponseParameters": Object {
              "method.response.header.Access-Control-Allow-Credentials": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapiauthE4846931",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapiauthgetCredentials162DF0F2": Object {
      "Properties": Object {
        "ParentId": Object {
          "Ref": "DeaRestApiConstructdeaapiauthE4846931",
        },
        "PathPart": "getCredentials",
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "DeaRestApiConstructdeaapiauthgetCredentialsOPTIONS6F2C55DF": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": Object {
          "IntegrationResponses": Array [
            Object {
              "ResponseParameters": Object {
                "method.response.header.Access-Control-Allow-Credentials": "'true'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,CSRF-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST,PUT,PATCH,DELETE'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": Object {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": Array [
          Object {
            "ResponseParameters": Object {
              "method.response.header.Access-Control-Allow-Credentials": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapiauthgetCredentials162DF0F2",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapiauthgetCredentialsidToken81FDE330": Object {
      "Properties": Object {
        "ParentId": Object {
          "Ref": "DeaRestApiConstructdeaapiauthgetCredentials162DF0F2",
        },
        "PathPart": "{idToken}",
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "DeaRestApiConstructdeaapiauthgetCredentialsidTokenGETApiPermissionTestteststackDeaRestApiConstructdeaapi96FE45F4GETauthgetCredentialsidTokenC2CFE426": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructGETidToken48065721",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/test-invoke-stage/GET/auth/getCredentials/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapiauthgetCredentialsidTokenGETApiPermissionteststackDeaRestApiConstructdeaapi96FE45F4GETauthgetCredentialsidTokenADD4B7DF": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructGETidToken48065721",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/",
              Object {
                "Ref": "DeaRestApiConstructdeaapiDeploymentStage[STAGE-REMOVED][HASH REMOVED]",
              },
              "/GET/auth/getCredentials/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapiauthgetCredentialsidTokenGETF30F6BC2": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "DeaRestApiConstructGETidToken48065721",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapiauthgetCredentialsidToken81FDE330",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapiauthgetCredentialsidTokenOPTIONSA66044D9": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": Object {
          "IntegrationResponses": Array [
            Object {
              "ResponseParameters": Object {
                "method.response.header.Access-Control-Allow-Credentials": "'true'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,CSRF-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST,PUT,PATCH,DELETE'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": Object {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": Array [
          Object {
            "ResponseParameters": Object {
              "method.response.header.Access-Control-Allow-Credentials": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapiauthgetCredentialsidToken81FDE330",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapiauthgetTokenF874EF26": Object {
      "Properties": Object {
        "ParentId": Object {
          "Ref": "DeaRestApiConstructdeaapiauthE4846931",
        },
        "PathPart": "getToken",
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "DeaRestApiConstructdeaapiauthgetTokenOPTIONS914E22A0": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": Object {
          "IntegrationResponses": Array [
            Object {
              "ResponseParameters": Object {
                "method.response.header.Access-Control-Allow-Credentials": "'true'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,CSRF-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST,PUT,PATCH,DELETE'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": Object {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": Array [
          Object {
            "ResponseParameters": Object {
              "method.response.header.Access-Control-Allow-Credentials": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapiauthgetTokenF874EF26",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapiauthgetTokenauthCode1D020E3A": Object {
      "Properties": Object {
        "ParentId": Object {
          "Ref": "DeaRestApiConstructdeaapiauthgetTokenF874EF26",
        },
        "PathPart": "{authCode}",
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "DeaRestApiConstructdeaapiauthgetTokenauthCodeOPTIONS7DF32090": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": Object {
          "IntegrationResponses": Array [
            Object {
              "ResponseParameters": Object {
                "method.response.header.Access-Control-Allow-Credentials": "'true'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,CSRF-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST,PUT,PATCH,DELETE'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": Object {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": Array [
          Object {
            "ResponseParameters": Object {
              "method.response.header.Access-Control-Allow-Credentials": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapiauthgetTokenauthCode1D020E3A",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapiauthgetTokenauthCodePOST3DCF3F52": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "DeaRestApiConstructPOSTauthCode8A1B1E18",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapiauthgetTokenauthCode1D020E3A",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapiauthgetTokenauthCodePOSTApiPermissionTestteststackDeaRestApiConstructdeaapi96FE45F4POSTauthgetTokenauthCodeACE7580F": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructPOSTauthCode8A1B1E18",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/test-invoke-stage/POST/auth/getToken/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapiauthgetTokenauthCodePOSTApiPermissionteststackDeaRestApiConstructdeaapi96FE45F4POSTauthgetTokenauthCode64CC0A48": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructPOSTauthCode8A1B1E18",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/",
              Object {
                "Ref": "DeaRestApiConstructdeaapiDeploymentStage[STAGE-REMOVED][HASH REMOVED]",
              },
              "/POST/auth/getToken/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapibye9DFF71B3": Object {
      "Properties": Object {
        "ParentId": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeaapi6587DDA1",
            "RootResourceId",
          ],
        },
        "PathPart": "bye",
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "DeaRestApiConstructdeaapibyeGET3BEB4A0A": Object {
      "Properties": Object {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "DeaRestApiConstructGETbyeD5063377",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapibye9DFF71B3",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapibyeGETApiPermissionTestteststackDeaRestApiConstructdeaapi96FE45F4GETbyeB5A3F6C1": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructGETbyeD5063377",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/test-invoke-stage/GET/bye",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapibyeGETApiPermissionteststackDeaRestApiConstructdeaapi96FE45F4GETbyeCB20EC60": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructGETbyeD5063377",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/",
              Object {
                "Ref": "DeaRestApiConstructdeaapiDeploymentStage[STAGE-REMOVED][HASH REMOVED]",
              },
              "/GET/bye",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapibyeOPTIONS00A7A259": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": Object {
          "IntegrationResponses": Array [
            Object {
              "ResponseParameters": Object {
                "method.response.header.Access-Control-Allow-Credentials": "'true'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,CSRF-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST,PUT,PATCH,DELETE'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": Object {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": Array [
          Object {
            "ResponseParameters": Object {
              "method.response.header.Access-Control-Allow-Credentials": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapibye9DFF71B3",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapicasesC2FD1C2B": Object {
      "Properties": Object {
        "ParentId": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeaapi6587DDA1",
            "RootResourceId",
          ],
        },
        "PathPart": "cases",
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "DeaRestApiConstructdeaapicasesOPTIONS6C23822B": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": Object {
          "IntegrationResponses": Array [
            Object {
              "ResponseParameters": Object {
                "method.response.header.Access-Control-Allow-Credentials": "'true'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,CSRF-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST,PUT,PATCH,DELETE'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": Object {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": Array [
          Object {
            "ResponseParameters": Object {
              "method.response.header.Access-Control-Allow-Credentials": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapicasesC2FD1C2B",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapicasesPOST0A7C65AB": Object {
      "Properties": Object {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "POST",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "DeaRestApiConstructPOSTcases71FC396B",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapicasesC2FD1C2B",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapicasesPOSTApiPermissionTestteststackDeaRestApiConstructdeaapi96FE45F4POSTcasesB76BA281": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructPOSTcases71FC396B",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/test-invoke-stage/POST/cases",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasesPOSTApiPermissionteststackDeaRestApiConstructdeaapi96FE45F4POSTcases9AE2A82E": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructPOSTcases71FC396B",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/",
              Object {
                "Ref": "DeaRestApiConstructdeaapiDeploymentStage[STAGE-REMOVED][HASH REMOVED]",
              },
              "/POST/cases",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasesallcases5A486593": Object {
      "Properties": Object {
        "ParentId": Object {
          "Ref": "DeaRestApiConstructdeaapicasesC2FD1C2B",
        },
        "PathPart": "all-cases",
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "DeaRestApiConstructdeaapicasesallcasesGET3D7FE7B4": Object {
      "Properties": Object {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "RequestParameters": Object {
            "integration.request.querystring.limit": "method.request.querystring.limit",
            "integration.request.querystring.next": "method.request.querystring.next",
          },
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "DeaRestApiConstructGETallcases490E3EC5",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "RequestParameters": Object {
          "method.request.querystring.limit": false,
          "method.request.querystring.next": false,
        },
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapicasesallcases5A486593",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapicasesallcasesGETApiPermissionTestteststackDeaRestApiConstructdeaapi96FE45F4GETcasesallcases0A56C052": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructGETallcases490E3EC5",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/test-invoke-stage/GET/cases/all-cases",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasesallcasesGETApiPermissionteststackDeaRestApiConstructdeaapi96FE45F4GETcasesallcases8A384810": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructGETallcases490E3EC5",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/",
              Object {
                "Ref": "DeaRestApiConstructdeaapiDeploymentStage[STAGE-REMOVED][HASH REMOVED]",
              },
              "/GET/cases/all-cases",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasesallcasesOPTIONSA5C611C6": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": Object {
          "IntegrationResponses": Array [
            Object {
              "ResponseParameters": Object {
                "method.response.header.Access-Control-Allow-Credentials": "'true'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,CSRF-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST,PUT,PATCH,DELETE'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": Object {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": Array [
          Object {
            "ResponseParameters": Object {
              "method.response.header.Access-Control-Allow-Credentials": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapicasesallcases5A486593",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapicasescaseId5919A5AE": Object {
      "Properties": Object {
        "ParentId": Object {
          "Ref": "DeaRestApiConstructdeaapicasesC2FD1C2B",
        },
        "PathPart": "{caseId}",
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "DeaRestApiConstructdeaapicasescaseIdDELETEApiPermissionTestteststackDeaRestApiConstructdeaapi96FE45F4DELETEcasescaseIdF0BFC230": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructDELETEcaseIdE0E7560F",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/test-invoke-stage/DELETE/cases/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasescaseIdDELETEApiPermissionteststackDeaRestApiConstructdeaapi96FE45F4DELETEcasescaseId683887F7": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructDELETEcaseIdE0E7560F",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/",
              Object {
                "Ref": "DeaRestApiConstructdeaapiDeploymentStage[STAGE-REMOVED][HASH REMOVED]",
              },
              "/DELETE/cases/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasescaseIdDELETEE13D0EAA": Object {
      "Properties": Object {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "DELETE",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "DeaRestApiConstructDELETEcaseIdE0E7560F",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapicasescaseId5919A5AE",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapicasescaseIdGET31A0ADCB": Object {
      "Properties": Object {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "DeaRestApiConstructGETcaseId3B128BAD",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapicasescaseId5919A5AE",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapicasescaseIdGETApiPermissionTestteststackDeaRestApiConstructdeaapi96FE45F4GETcasescaseId9EC4CD2A": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructGETcaseId3B128BAD",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/test-invoke-stage/GET/cases/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasescaseIdGETApiPermissionteststackDeaRestApiConstructdeaapi96FE45F4GETcasescaseId3A6CC8C8": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructGETcaseId3B128BAD",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/",
              Object {
                "Ref": "DeaRestApiConstructdeaapiDeploymentStage[STAGE-REMOVED][HASH REMOVED]",
              },
              "/GET/cases/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasescaseIdOPTIONS28A51954": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": Object {
          "IntegrationResponses": Array [
            Object {
              "ResponseParameters": Object {
                "method.response.header.Access-Control-Allow-Credentials": "'true'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,CSRF-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST,PUT,PATCH,DELETE'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": Object {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": Array [
          Object {
            "ResponseParameters": Object {
              "method.response.header.Access-Control-Allow-Credentials": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapicasescaseId5919A5AE",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapicasescaseIdPUTApiPermissionTestteststackDeaRestApiConstructdeaapi96FE45F4PUTcasescaseId37A77CC0": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructPUTcaseId804DFA77",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/test-invoke-stage/PUT/cases/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasescaseIdPUTApiPermissionteststackDeaRestApiConstructdeaapi96FE45F4PUTcasescaseId6D37C013": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructPUTcaseId804DFA77",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/",
              Object {
                "Ref": "DeaRestApiConstructdeaapiDeploymentStage[STAGE-REMOVED][HASH REMOVED]",
              },
              "/PUT/cases/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasescaseIdPUTDAF01FBF": Object {
      "Properties": Object {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "PUT",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "DeaRestApiConstructPUTcaseId804DFA77",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapicasescaseId5919A5AE",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapicasescaseIdfilesC98413A7": Object {
      "Properties": Object {
        "ParentId": Object {
          "Ref": "DeaRestApiConstructdeaapicasescaseId5919A5AE",
        },
        "PathPart": "files",
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "DeaRestApiConstructdeaapicasescaseIdfilesOPTIONS18C09E02": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": Object {
          "IntegrationResponses": Array [
            Object {
              "ResponseParameters": Object {
                "method.response.header.Access-Control-Allow-Credentials": "'true'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,CSRF-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST,PUT,PATCH,DELETE'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": Object {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": Array [
          Object {
            "ResponseParameters": Object {
              "method.response.header.Access-Control-Allow-Credentials": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapicasescaseIdfilesC98413A7",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapicasescaseIdfilesPOST6C02B6FD": Object {
      "Properties": Object {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "POST",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "DeaRestApiConstructPOSTfilesD0E72419",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapicasescaseIdfilesC98413A7",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapicasescaseIdfilesPOSTApiPermissionTestteststackDeaRestApiConstructdeaapi96FE45F4POSTcasescaseIdfilesC519AD34": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructPOSTfilesD0E72419",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/test-invoke-stage/POST/cases/*/files",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasescaseIdfilesPOSTApiPermissionteststackDeaRestApiConstructdeaapi96FE45F4POSTcasescaseIdfiles39BF2383": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructPOSTfilesD0E72419",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/",
              Object {
                "Ref": "DeaRestApiConstructdeaapiDeploymentStage[STAGE-REMOVED][HASH REMOVED]",
              },
              "/POST/cases/*/files",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasescaseIdfilesfileId71AE0C3F": Object {
      "Properties": Object {
        "ParentId": Object {
          "Ref": "DeaRestApiConstructdeaapicasescaseIdfilesC98413A7",
        },
        "PathPart": "{fileId}",
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "DeaRestApiConstructdeaapicasescaseIdfilesfileIdOPTIONS0739484E": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": Object {
          "IntegrationResponses": Array [
            Object {
              "ResponseParameters": Object {
                "method.response.header.Access-Control-Allow-Credentials": "'true'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,CSRF-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST,PUT,PATCH,DELETE'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": Object {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": Array [
          Object {
            "ResponseParameters": Object {
              "method.response.header.Access-Control-Allow-Credentials": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapicasescaseIdfilesfileId71AE0C3F",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapicasescaseIdfilesfileIdPUTApiPermissionTestteststackDeaRestApiConstructdeaapi96FE45F4PUTcasescaseIdfilesfileIdE52AC54F": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructPUTfileId8DA844F1",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/test-invoke-stage/PUT/cases/*/files/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasescaseIdfilesfileIdPUTApiPermissionteststackDeaRestApiConstructdeaapi96FE45F4PUTcasescaseIdfilesfileId670DC465": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructPUTfileId8DA844F1",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/",
              Object {
                "Ref": "DeaRestApiConstructdeaapiDeploymentStage[STAGE-REMOVED][HASH REMOVED]",
              },
              "/PUT/cases/*/files/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasescaseIdfilesfileIdPUTDD763A2A": Object {
      "Properties": Object {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "PUT",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "DeaRestApiConstructPUTfileId8DA844F1",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapicasescaseIdfilesfileId71AE0C3F",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapicasescaseIduserMembershipsD5C1FDF3": Object {
      "Properties": Object {
        "ParentId": Object {
          "Ref": "DeaRestApiConstructdeaapicasescaseId5919A5AE",
        },
        "PathPart": "userMemberships",
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "DeaRestApiConstructdeaapicasescaseIduserMembershipsOPTIONS8FB7464B": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": Object {
          "IntegrationResponses": Array [
            Object {
              "ResponseParameters": Object {
                "method.response.header.Access-Control-Allow-Credentials": "'true'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,CSRF-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST,PUT,PATCH,DELETE'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": Object {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": Array [
          Object {
            "ResponseParameters": Object {
              "method.response.header.Access-Control-Allow-Credentials": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapicasescaseIduserMembershipsD5C1FDF3",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapicasescaseIduserMembershipsPOST84A13ED4": Object {
      "Properties": Object {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "POST",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "DeaRestApiConstructPOSTuserMembershipsA9A79B32",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapicasescaseIduserMembershipsD5C1FDF3",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapicasescaseIduserMembershipsPOSTApiPermissionTestteststackDeaRestApiConstructdeaapi96FE45F4POSTcasescaseIduserMembershipsBD47C55D": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructPOSTuserMembershipsA9A79B32",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/test-invoke-stage/POST/cases/*/userMemberships",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasescaseIduserMembershipsPOSTApiPermissionteststackDeaRestApiConstructdeaapi96FE45F4POSTcasescaseIduserMemberships7500E258": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructPOSTuserMembershipsA9A79B32",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/",
              Object {
                "Ref": "DeaRestApiConstructdeaapiDeploymentStage[STAGE-REMOVED][HASH REMOVED]",
              },
              "/POST/cases/*/userMemberships",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasescaseIduserMembershipsuserId13BB910A": Object {
      "Properties": Object {
        "ParentId": Object {
          "Ref": "DeaRestApiConstructdeaapicasescaseIduserMembershipsD5C1FDF3",
        },
        "PathPart": "{userId}",
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "DeaRestApiConstructdeaapicasescaseIduserMembershipsuserIdDELETE5C89D30D": Object {
      "Properties": Object {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "DELETE",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "DeaRestApiConstructDELETEuserId97F2887D",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapicasescaseIduserMembershipsuserId13BB910A",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapicasescaseIduserMembershipsuserIdDELETEApiPermissionTestteststackDeaRestApiConstructdeaapi96FE45F4DELETEcasescaseIduserMembershipsuserId309358C9": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructDELETEuserId97F2887D",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/test-invoke-stage/DELETE/cases/*/userMemberships/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasescaseIduserMembershipsuserIdDELETEApiPermissionteststackDeaRestApiConstructdeaapi96FE45F4DELETEcasescaseIduserMembershipsuserId4DEF5A06": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructDELETEuserId97F2887D",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/",
              Object {
                "Ref": "DeaRestApiConstructdeaapiDeploymentStage[STAGE-REMOVED][HASH REMOVED]",
              },
              "/DELETE/cases/*/userMemberships/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasescaseIduserMembershipsuserIdOPTIONS2A768A43": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": Object {
          "IntegrationResponses": Array [
            Object {
              "ResponseParameters": Object {
                "method.response.header.Access-Control-Allow-Credentials": "'true'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,CSRF-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST,PUT,PATCH,DELETE'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": Object {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": Array [
          Object {
            "ResponseParameters": Object {
              "method.response.header.Access-Control-Allow-Credentials": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapicasescaseIduserMembershipsuserId13BB910A",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapicasescaseIduserMembershipsuserIdPUTApiPermissionTestteststackDeaRestApiConstructdeaapi96FE45F4PUTcasescaseIduserMembershipsuserIdE325F9CF": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructPUTuserId248180A2",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/test-invoke-stage/PUT/cases/*/userMemberships/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasescaseIduserMembershipsuserIdPUTApiPermissionteststackDeaRestApiConstructdeaapi96FE45F4PUTcasescaseIduserMembershipsuserId1CD72580": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructPUTuserId248180A2",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/",
              Object {
                "Ref": "DeaRestApiConstructdeaapiDeploymentStage[STAGE-REMOVED][HASH REMOVED]",
              },
              "/PUT/cases/*/userMemberships/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasescaseIduserMembershipsuserIdPUTC33F61E0": Object {
      "Properties": Object {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "PUT",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "DeaRestApiConstructPUTuserId248180A2",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapicasescaseIduserMembershipsuserId13BB910A",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapicasesmycases5E6BEFAC": Object {
      "Properties": Object {
        "ParentId": Object {
          "Ref": "DeaRestApiConstructdeaapicasesC2FD1C2B",
        },
        "PathPart": "my-cases",
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "DeaRestApiConstructdeaapicasesmycasesGETApiPermissionTestteststackDeaRestApiConstructdeaapi96FE45F4GETcasesmycasesC2E61486": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructGETmycasesF570E0D9",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/test-invoke-stage/GET/cases/my-cases",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasesmycasesGETApiPermissionteststackDeaRestApiConstructdeaapi96FE45F4GETcasesmycasesEA5EFE48": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructGETmycasesF570E0D9",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/",
              Object {
                "Ref": "DeaRestApiConstructdeaapiDeploymentStage[STAGE-REMOVED][HASH REMOVED]",
              },
              "/GET/cases/my-cases",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasesmycasesGETC5597167": Object {
      "Properties": Object {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "RequestParameters": Object {
            "integration.request.querystring.limit": "method.request.querystring.limit",
            "integration.request.querystring.next": "method.request.querystring.next",
          },
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "DeaRestApiConstructGETmycasesF570E0D9",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "RequestParameters": Object {
          "method.request.querystring.limit": false,
          "method.request.querystring.next": false,
        },
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapicasesmycases5E6BEFAC",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapicasesmycasesOPTIONSE1C2DE04": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": Object {
          "IntegrationResponses": Array [
            Object {
              "ResponseParameters": Object {
                "method.response.header.Access-Control-Allow-Credentials": "'true'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,CSRF-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST,PUT,PATCH,DELETE'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": Object {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": Array [
          Object {
            "ResponseParameters": Object {
              "method.response.header.Access-Control-Allow-Credentials": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapicasesmycases5E6BEFAC",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapihi7D1B234E": Object {
      "Properties": Object {
        "ParentId": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeaapi6587DDA1",
            "RootResourceId",
          ],
        },
        "PathPart": "hi",
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "DeaRestApiConstructdeaapihiGETApiPermissionTestteststackDeaRestApiConstructdeaapi96FE45F4GEThi9F62F9B4": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructGEThi76A71F55",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/test-invoke-stage/GET/hi",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapihiGETApiPermissionteststackDeaRestApiConstructdeaapi96FE45F4GEThi771DF2AF": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructGEThi76A71F55",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/",
              Object {
                "Ref": "DeaRestApiConstructdeaapiDeploymentStage[STAGE-REMOVED][HASH REMOVED]",
              },
              "/GET/hi",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapihiGETDB467AC2": Object {
      "Properties": Object {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "DeaRestApiConstructGEThi76A71F55",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapihi7D1B234E",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapihiOPTIONSEFEA6225": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": Object {
          "IntegrationResponses": Array [
            Object {
              "ResponseParameters": Object {
                "method.response.header.Access-Control-Allow-Credentials": "'true'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,CSRF-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST,PUT,PATCH,DELETE'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": Object {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": Array [
          Object {
            "ResponseParameters": Object {
              "method.response.header.Access-Control-Allow-Credentials": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapihi7D1B234E",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapiusers95152658": Object {
      "Properties": Object {
        "ParentId": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeaapi6587DDA1",
            "RootResourceId",
          ],
        },
        "PathPart": "users",
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "DeaRestApiConstructdeaapiusersGET45E97005": Object {
      "Properties": Object {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "RequestParameters": Object {
            "integration.request.querystring.nameBeginsWith": "method.request.querystring.nameBeginsWith",
          },
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "DeaRestApiConstructGETusersDD8AA5AF",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "RequestParameters": Object {
          "method.request.querystring.nameBeginsWith": false,
        },
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapiusers95152658",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapiusersGETApiPermissionTestteststackDeaRestApiConstructdeaapi96FE45F4GETusers8EAF9CF0": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructGETusersDD8AA5AF",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/test-invoke-stage/GET/users",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapiusersGETApiPermissionteststackDeaRestApiConstructdeaapi96FE45F4GETusers52337E4B": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructGETusersDD8AA5AF",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/",
              Object {
                "Ref": "DeaRestApiConstructdeaapiDeploymentStage[STAGE-REMOVED][HASH REMOVED]",
              },
              "/GET/users",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapiusersOPTIONS8F715BE6": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": Object {
          "IntegrationResponses": Array [
            Object {
              "ResponseParameters": Object {
                "method.response.header.Access-Control-Allow-Credentials": "'true'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,CSRF-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST,PUT,PATCH,DELETE'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": Object {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": Array [
          Object {
            "ResponseParameters": Object {
              "method.response.header.Access-Control-Allow-Credentials": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapiusers95152658",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeabaselambdarole9EA2B06B": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DeaRestApiConstructdeabaselambdaroleDefaultPolicy8449FBB9": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "dynamodb:GetItem",
                "dynamodb:DeleteItem",
                "dynamodb:BatchGetItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:Query",
                "dynamodb:UpdateItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "DeaBackendConstructDeaTableB48721A0",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "DeaBackendConstructDeaTableB48721A0",
                          "Arn",
                        ],
                      },
                      "/index/GSI1",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "DeaBackendConstructDeaTableB48721A0",
                          "Arn",
                        ],
                      },
                      "/index/GSI2",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "s3:AbortMultipartUpload",
                "s3:ListMultipartUploadParts",
                "s3:PutObject",
                "s3:GetObject",
                "s3:GetObjectLegalHold",
                "s3:PutObjectLegalHold",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "DeaBackendConstructS3DatasetsBucketDDF4C58A",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:GenerateDataKey",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "testKey1CDDDD5E",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ssm:GetParameters",
                "ssm:GetParameter",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:aws:ssm:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/dea/",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    "/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DeaRestApiConstructdeabaselambdaroleDefaultPolicy8449FBB9",
        "Roles": Array [
          Object {
            "Ref": "DeaRestApiConstructdeabaselambdarole9EA2B06B",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "deaAuditLogs7B75D3F1": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "KmsKeyId": Object {
          "Fn::GetAtt": Array [
            "testKey1CDDDD5E",
            "Arn",
          ],
        },
        "RetentionInDays": 14,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "deaTrail2681791A": Object {
      "DependsOn": Array [
        "DeaAuditdeaTrailBucketPolicyA68DF945",
        "deaTrailLogsRoleDefaultPolicyA1D73827",
        "deaTrailLogsRole13472204",
      ],
      "Properties": Object {
        "CloudWatchLogsLogGroupArn": Object {
          "Fn::GetAtt": Array [
            "deaTrailLogs0A0531F5",
            "Arn",
          ],
        },
        "CloudWatchLogsRoleArn": Object {
          "Fn::GetAtt": Array [
            "deaTrailLogsRole13472204",
            "Arn",
          ],
        },
        "EnableLogFileValidation": true,
        "EventSelectors": Array [],
        "IncludeGlobalServiceEvents": true,
        "IsLogging": true,
        "IsMultiRegionTrail": true,
        "KMSKeyId": Object {
          "Fn::GetAtt": Array [
            "testKey1CDDDD5E",
            "Arn",
          ],
        },
        "S3BucketName": Object {
          "Ref": "DeaAuditdeaTrailBucket4819FF43",
        },
      },
      "Type": "AWS::CloudTrail::Trail",
    },
    "deaTrailLogs0A0531F5": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "KmsKeyId": Object {
          "Fn::GetAtt": Array [
            "testKey1CDDDD5E",
            "Arn",
          ],
        },
        "RetentionInDays": 14,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "deaTrailLogsRole13472204": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "cloudtrail.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "deaTrailLogsRoleDefaultPolicyA1D73827": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:PutLogEvents",
                "logs:CreateLogStream",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "deaTrailLogs0A0531F5",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "deaTrailLogsRoleDefaultPolicyA1D73827",
        "Roles": Array [
          Object {
            "Ref": "deaTrailLogsRole13472204",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "testKey1CDDDD5E": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "EnableKeyRotation": true,
        "KeyPolicy": Object {
          "Statement": Array [
            Object {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "Service": "cloudtrail.amazonaws.com",
              },
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PendingWindowInDays": 7,
      },
      "Type": "AWS::KMS::Key",
      "UpdateReplacePolicy": "Delete",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
