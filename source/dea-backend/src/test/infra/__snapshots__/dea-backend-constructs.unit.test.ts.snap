// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DeaBackend constructs synthesizes the way we expect 1`] = `
Object {
  "Outputs": Object {
    "DeaRestApiConstructdeaApiUrlOutput2CFCF9D0": Object {
      "Export": Object {
        "Name": "deaApiUrl",
      },
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Ref": "DeaRestApiConstructdeaapi6587DDA1",
            },
            ".execute-api.",
            Object {
              "Ref": "AWS::Region",
            },
            ".",
            Object {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            Object {
              "Ref": "DeaRestApiConstructdeaapiDeploymentStagetest1A3F50BF",
            },
            "/",
          ],
        ],
      },
    },
    "DeaRestApiConstructdeaapiEndpoint5DCD0FC9": Object {
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Ref": "DeaRestApiConstructdeaapi6587DDA1",
            },
            ".execute-api.",
            Object {
              "Ref": "AWS::Region",
            },
            ".",
            Object {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            Object {
              "Ref": "DeaRestApiConstructdeaapiDeploymentStagetest1A3F50BF",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": Object {
      "DependsOn": Array [
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "import boto3  # type: ignore
import json
import logging
import urllib.request

s3 = boto3.client(\\"s3\\")

EVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'

CONFIGURATION_TYPES = [\\"TopicConfigurations\\", \\"QueueConfigurations\\", \\"LambdaFunctionConfigurations\\"]

def handler(event: dict, context):
  response_status = \\"SUCCESS\\"
  error_message = \\"\\"
  try:
    props = event[\\"ResourceProperties\\"]
    bucket = props[\\"BucketName\\"]
    notification_configuration = props[\\"NotificationConfiguration\\"]
    request_type = event[\\"RequestType\\"]
    managed = props.get('Managed', 'true').lower() == 'true'
    stack_id = event['StackId']

    if managed:
      config = handle_managed(request_type, notification_configuration)
    else:
      config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)

    put_bucket_notification_configuration(bucket, config)
  except Exception as e:
    logging.exception(\\"Failed to put bucket notification configuration\\")
    response_status = \\"FAILED\\"
    error_message = f\\"Error: {str(e)}. \\"
  finally:
    submit_response(event, context, response_status, error_message)

def handle_managed(request_type, notification_configuration):
  if request_type == 'Delete':
    return {}
  return notification_configuration

def handle_unmanaged(bucket, stack_id, request_type, notification_configuration):
  external_notifications = find_external_notifications(bucket, stack_id)

  if request_type == 'Delete':
    return external_notifications

  def with_id(notification):
    notification['Id'] = f\\"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}\\"
    return notification

  notifications = {}
  for t in CONFIGURATION_TYPES:
    external = external_notifications.get(t, [])
    incoming = [with_id(n) for n in notification_configuration.get(t, [])]
    notifications[t] = external + incoming

  if EVENTBRIDGE_CONFIGURATION in notification_configuration:
    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]
  elif EVENTBRIDGE_CONFIGURATION in external_notifications:
    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]

  return notifications

def find_external_notifications(bucket, stack_id):
  existing_notifications = get_bucket_notification_configuration(bucket)
  external_notifications = {}
  for t in CONFIGURATION_TYPES:
    external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\\"{stack_id}-\\")]

  if EVENTBRIDGE_CONFIGURATION in existing_notifications:
    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]

  return external_notifications

def get_bucket_notification_configuration(bucket):
  return s3.get_bucket_notification_configuration(Bucket=bucket)

def put_bucket_notification_configuration(bucket, notification_configuration):
  s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)

def submit_response(event: dict, context, response_status: str, error_message: str):
  response_body = json.dumps(
    {
      \\"Status\\": response_status,
      \\"Reason\\": f\\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\\",
      \\"PhysicalResourceId\\": event.get(\\"PhysicalResourceId\\") or event[\\"LogicalResourceId\\"],
      \\"StackId\\": event[\\"StackId\\"],
      \\"RequestId\\": event[\\"RequestId\\"],
      \\"LogicalResourceId\\": event[\\"LogicalResourceId\\"],
      \\"NoEcho\\": False,
    }
  ).encode(\\"utf-8\\")
  headers = {\\"content-type\\": \\"\\", \\"content-length\\": str(len(response_body))}
  try:
    req = urllib.request.Request(url=event[\\"ResponseURL\\"], headers=headers, data=response_body, method=\\"PUT\\")
    with urllib.request.urlopen(req) as response:
      print(response.read().decode(\\"utf-8\\"))
    print(\\"Status code: \\" + response.reason)
  except Exception as e:
      print(\\"send(..) failed executing request.urlopen(..): \\" + str(e))
",
        },
        "Description": "AWS CloudFormation handler for \\"Custom::S3BucketNotifications\\" resources (@aws-cdk/aws-s3)",
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
            "Arn",
          ],
        },
        "Runtime": "python3.7",
        "Timeout": 300,
      },
      "Type": "AWS::Lambda::Function",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:PutBucketNotification",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "Roles": Array [
          Object {
            "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DeaBackendConstructDeaTableB48721A0": Object {
      "DeletionPolicy": "Delete",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W28",
              "reason": "Table requires an explicit name to be referenced by Onetable",
            },
          ],
        },
      },
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "PK",
            "AttributeType": "S",
          },
          Object {
            "AttributeName": "SK",
            "AttributeType": "S",
          },
          Object {
            "AttributeName": "GSI1PK",
            "AttributeType": "S",
          },
          Object {
            "AttributeName": "GSI1SK",
            "AttributeType": "S",
          },
          Object {
            "AttributeName": "GSI2PK",
            "AttributeType": "S",
          },
          Object {
            "AttributeName": "GSI2SK",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "GlobalSecondaryIndexes": Array [
          Object {
            "IndexName": "GSI1",
            "KeySchema": Array [
              Object {
                "AttributeName": "GSI1PK",
                "KeyType": "HASH",
              },
              Object {
                "AttributeName": "GSI1SK",
                "KeyType": "RANGE",
              },
            ],
            "Projection": Object {
              "ProjectionType": "ALL",
            },
          },
          Object {
            "IndexName": "GSI2",
            "KeySchema": Array [
              Object {
                "AttributeName": "GSI2PK",
                "KeyType": "HASH",
              },
              Object {
                "AttributeName": "GSI2SK",
                "KeyType": "RANGE",
              },
            ],
            "Projection": Object {
              "ProjectionType": "ALL",
            },
          },
        ],
        "KeySchema": Array [
          Object {
            "AttributeName": "PK",
            "KeyType": "HASH",
          },
          Object {
            "AttributeName": "SK",
            "KeyType": "RANGE",
          },
        ],
        "PointInTimeRecoverySpecification": Object {
          "PointInTimeRecoveryEnabled": true,
        },
        "SSESpecification": Object {
          "KMSMasterKeyId": Object {
            "Fn::GetAtt": Array [
              "testKey1CDDDD5E",
              "Arn",
            ],
          },
          "SSEEnabled": true,
          "SSEType": "KMS",
        },
        "TableName": "DeaTable",
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Delete",
    },
    "DeaBackendConstructdeadatasetstesttestvilleE8CB3A97": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "BucketKeyEnabled": true,
              "ServerSideEncryptionByDefault": Object {
                "KMSMasterKeyID": Object {
                  "Fn::GetAtt": Array [
                    "testKey1CDDDD5E",
                    "Arn",
                  ],
                },
                "SSEAlgorithm": "aws:kms",
              },
            },
          ],
        },
        "BucketName": "dea-datasets-test-testville",
        "LifecycleConfiguration": Object {
          "Rules": Array [
            Object {
              "AbortIncompleteMultipartUpload": Object {
                "DaysAfterInitiation": 1,
              },
              "Id": "DeaDatasetsDeleteIncompleteUploadsLifecyclePolicy",
              "Status": "Enabled",
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": Object {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "DeaBackendConstructdeadatasetstesttestvilleNotificationsD093864A": Object {
      "Properties": Object {
        "BucketName": Object {
          "Ref": "DeaBackendConstructdeadatasetstesttestvilleE8CB3A97",
        },
        "Managed": true,
        "NotificationConfiguration": Object {
          "EventBridgeConfiguration": Object {},
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3BucketNotifications",
    },
    "DeaBackendConstructdeadatasetstesttestvillePolicyBF4084B4": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "DeaBackendConstructdeadatasetstesttestvilleE8CB3A97",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "DeaBackendConstructdeadatasetstesttestvilleE8CB3A97",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "DeaBackendConstructdeadatasetstesttestvilleE8CB3A97",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "DeaRestApiConstructAPIGatewayAccessLogs56D13F5D": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "KmsKeyId": Object {
          "Fn::GetAtt": Array [
            "testKey1CDDDD5E",
            "Arn",
          ],
        },
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "DeaRestApiConstructDELETEcaseIdE0E7560F": Object {
      "DependsOn": Array [
        "DeaRestApiConstructdeabaselambdaroleDefaultPolicy8449FBB9",
        "DeaRestApiConstructdeabaselambdarole9EA2B06B",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "AWSCustomResource Lambda Function has AWSLambdaBasicExecutionRole policy attached which has the required permission to write to Cloudwatch Logs",
            },
            Object {
              "id": "W92",
              "reason": "Reserved concurrency is currently not required. Revisit in the future",
            },
            Object {
              "id": "W89",
              "reason": "The serverless application lens (https://docs.aws.amazon.com/wellarchitected/latest/serverless-applications-lens/aws-lambda.html)               indicates lambdas should not be deployed in private VPCs unless they require acces to resources also within a VPC",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[HASH REMOVED].zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "NODE_OPTIONS": "--enable-source-maps",
          },
        },
        "Handler": "index.handler",
        "MemorySize": 512,
        "Role": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeabaselambdarole9EA2B06B",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DeaRestApiConstructGETallcases490E3EC5": Object {
      "DependsOn": Array [
        "DeaRestApiConstructdeabaselambdaroleDefaultPolicy8449FBB9",
        "DeaRestApiConstructdeabaselambdarole9EA2B06B",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "AWSCustomResource Lambda Function has AWSLambdaBasicExecutionRole policy attached which has the required permission to write to Cloudwatch Logs",
            },
            Object {
              "id": "W92",
              "reason": "Reserved concurrency is currently not required. Revisit in the future",
            },
            Object {
              "id": "W89",
              "reason": "The serverless application lens (https://docs.aws.amazon.com/wellarchitected/latest/serverless-applications-lens/aws-lambda.html)               indicates lambdas should not be deployed in private VPCs unless they require acces to resources also within a VPC",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[HASH REMOVED].zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "NODE_OPTIONS": "--enable-source-maps",
          },
        },
        "Handler": "index.handler",
        "MemorySize": 512,
        "Role": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeabaselambdarole9EA2B06B",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DeaRestApiConstructGETbyeD5063377": Object {
      "DependsOn": Array [
        "DeaRestApiConstructdeabaselambdaroleDefaultPolicy8449FBB9",
        "DeaRestApiConstructdeabaselambdarole9EA2B06B",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "AWSCustomResource Lambda Function has AWSLambdaBasicExecutionRole policy attached which has the required permission to write to Cloudwatch Logs",
            },
            Object {
              "id": "W92",
              "reason": "Reserved concurrency is currently not required. Revisit in the future",
            },
            Object {
              "id": "W89",
              "reason": "The serverless application lens (https://docs.aws.amazon.com/wellarchitected/latest/serverless-applications-lens/aws-lambda.html)               indicates lambdas should not be deployed in private VPCs unless they require acces to resources also within a VPC",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[HASH REMOVED].zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "NODE_OPTIONS": "--enable-source-maps",
          },
        },
        "Handler": "index.handler",
        "MemorySize": 512,
        "Role": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeabaselambdarole9EA2B06B",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DeaRestApiConstructGETcaseId3B128BAD": Object {
      "DependsOn": Array [
        "DeaRestApiConstructdeabaselambdaroleDefaultPolicy8449FBB9",
        "DeaRestApiConstructdeabaselambdarole9EA2B06B",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "AWSCustomResource Lambda Function has AWSLambdaBasicExecutionRole policy attached which has the required permission to write to Cloudwatch Logs",
            },
            Object {
              "id": "W92",
              "reason": "Reserved concurrency is currently not required. Revisit in the future",
            },
            Object {
              "id": "W89",
              "reason": "The serverless application lens (https://docs.aws.amazon.com/wellarchitected/latest/serverless-applications-lens/aws-lambda.html)               indicates lambdas should not be deployed in private VPCs unless they require acces to resources also within a VPC",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[HASH REMOVED].zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "NODE_OPTIONS": "--enable-source-maps",
          },
        },
        "Handler": "index.handler",
        "MemorySize": 512,
        "Role": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeabaselambdarole9EA2B06B",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DeaRestApiConstructGEThi76A71F55": Object {
      "DependsOn": Array [
        "DeaRestApiConstructdeabaselambdaroleDefaultPolicy8449FBB9",
        "DeaRestApiConstructdeabaselambdarole9EA2B06B",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "AWSCustomResource Lambda Function has AWSLambdaBasicExecutionRole policy attached which has the required permission to write to Cloudwatch Logs",
            },
            Object {
              "id": "W92",
              "reason": "Reserved concurrency is currently not required. Revisit in the future",
            },
            Object {
              "id": "W89",
              "reason": "The serverless application lens (https://docs.aws.amazon.com/wellarchitected/latest/serverless-applications-lens/aws-lambda.html)               indicates lambdas should not be deployed in private VPCs unless they require acces to resources also within a VPC",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[HASH REMOVED].zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "NODE_OPTIONS": "--enable-source-maps",
          },
        },
        "Handler": "index.handler",
        "MemorySize": 512,
        "Role": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeabaselambdarole9EA2B06B",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DeaRestApiConstructGETmycasesF570E0D9": Object {
      "DependsOn": Array [
        "DeaRestApiConstructdeabaselambdaroleDefaultPolicy8449FBB9",
        "DeaRestApiConstructdeabaselambdarole9EA2B06B",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "AWSCustomResource Lambda Function has AWSLambdaBasicExecutionRole policy attached which has the required permission to write to Cloudwatch Logs",
            },
            Object {
              "id": "W92",
              "reason": "Reserved concurrency is currently not required. Revisit in the future",
            },
            Object {
              "id": "W89",
              "reason": "The serverless application lens (https://docs.aws.amazon.com/wellarchitected/latest/serverless-applications-lens/aws-lambda.html)               indicates lambdas should not be deployed in private VPCs unless they require acces to resources also within a VPC",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[HASH REMOVED].zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "NODE_OPTIONS": "--enable-source-maps",
          },
        },
        "Handler": "index.handler",
        "MemorySize": 512,
        "Role": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeabaselambdarole9EA2B06B",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DeaRestApiConstructPOSTcases71FC396B": Object {
      "DependsOn": Array [
        "DeaRestApiConstructdeabaselambdaroleDefaultPolicy8449FBB9",
        "DeaRestApiConstructdeabaselambdarole9EA2B06B",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "AWSCustomResource Lambda Function has AWSLambdaBasicExecutionRole policy attached which has the required permission to write to Cloudwatch Logs",
            },
            Object {
              "id": "W92",
              "reason": "Reserved concurrency is currently not required. Revisit in the future",
            },
            Object {
              "id": "W89",
              "reason": "The serverless application lens (https://docs.aws.amazon.com/wellarchitected/latest/serverless-applications-lens/aws-lambda.html)               indicates lambdas should not be deployed in private VPCs unless they require acces to resources also within a VPC",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[HASH REMOVED].zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "NODE_OPTIONS": "--enable-source-maps",
          },
        },
        "Handler": "index.handler",
        "MemorySize": 512,
        "Role": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeabaselambdarole9EA2B06B",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DeaRestApiConstructPOSTuserMembershipsA9A79B32": Object {
      "DependsOn": Array [
        "DeaRestApiConstructdeabaselambdaroleDefaultPolicy8449FBB9",
        "DeaRestApiConstructdeabaselambdarole9EA2B06B",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "AWSCustomResource Lambda Function has AWSLambdaBasicExecutionRole policy attached which has the required permission to write to Cloudwatch Logs",
            },
            Object {
              "id": "W92",
              "reason": "Reserved concurrency is currently not required. Revisit in the future",
            },
            Object {
              "id": "W89",
              "reason": "The serverless application lens (https://docs.aws.amazon.com/wellarchitected/latest/serverless-applications-lens/aws-lambda.html)               indicates lambdas should not be deployed in private VPCs unless they require acces to resources also within a VPC",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[HASH REMOVED].zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "NODE_OPTIONS": "--enable-source-maps",
          },
        },
        "Handler": "index.handler",
        "MemorySize": 512,
        "Role": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeabaselambdarole9EA2B06B",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DeaRestApiConstructPUTcaseId804DFA77": Object {
      "DependsOn": Array [
        "DeaRestApiConstructdeabaselambdaroleDefaultPolicy8449FBB9",
        "DeaRestApiConstructdeabaselambdarole9EA2B06B",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "AWSCustomResource Lambda Function has AWSLambdaBasicExecutionRole policy attached which has the required permission to write to Cloudwatch Logs",
            },
            Object {
              "id": "W92",
              "reason": "Reserved concurrency is currently not required. Revisit in the future",
            },
            Object {
              "id": "W89",
              "reason": "The serverless application lens (https://docs.aws.amazon.com/wellarchitected/latest/serverless-applications-lens/aws-lambda.html)               indicates lambdas should not be deployed in private VPCs unless they require acces to resources also within a VPC",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "[HASH REMOVED].zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "NODE_OPTIONS": "--enable-source-maps",
          },
        },
        "Handler": "index.handler",
        "MemorySize": 512,
        "Role": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeabaselambdarole9EA2B06B",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DeaRestApiConstructdeaapi6587DDA1": Object {
      "Properties": Object {
        "Description": "Backend API",
        "Name": "dea-api",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "DeaRestApiConstructdeaapiAccount1E82C2B3": Object {
      "DeletionPolicy": "Retain",
      "DependsOn": Array [
        "DeaRestApiConstructdeaapi6587DDA1",
      ],
      "Properties": Object {
        "CloudWatchRoleArn": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeaapiCloudWatchRole49932FD9",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "DeaRestApiConstructdeaapiCloudWatchRole49932FD9": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "DeaRestApiConstructdeaapiDEAUsagePlanBC29ADF7": Object {
      "Properties": Object {
        "ApiStages": Array [
          Object {
            "ApiId": Object {
              "Ref": "DeaRestApiConstructdeaapi6587DDA1",
            },
            "Stage": Object {
              "Ref": "DeaRestApiConstructdeaapiDeploymentStagetest1A3F50BF",
            },
            "Throttle": Object {},
          },
        ],
        "Throttle": Object {
          "BurstLimit": 50,
          "RateLimit": 25,
        },
        "UsagePlanName": "dea-usage-plan",
      },
      "Type": "AWS::ApiGateway::UsagePlan",
    },
    "DeaRestApiConstructdeaapiDeploymentC27C6CB156d6fbeb74213a0e8c887b386a894700": Object {
      "DependsOn": Array [
        "DeaRestApiConstructdeaapibyeGET3BEB4A0A",
        "DeaRestApiConstructdeaapibyeOPTIONS00A7A259",
        "DeaRestApiConstructdeaapibye9DFF71B3",
        "DeaRestApiConstructdeaapicasescaseIdDELETEE13D0EAA",
        "DeaRestApiConstructdeaapicasescaseIdGET31A0ADCB",
        "DeaRestApiConstructdeaapicasescaseIdOPTIONS28A51954",
        "DeaRestApiConstructdeaapicasescaseIdPUTDAF01FBF",
        "DeaRestApiConstructdeaapicasescaseId5919A5AE",
        "DeaRestApiConstructdeaapicasescaseIduserMembershipsOPTIONS8FB7464B",
        "DeaRestApiConstructdeaapicasescaseIduserMembershipsPOST84A13ED4",
        "DeaRestApiConstructdeaapicasescaseIduserMembershipsD5C1FDF3",
        "DeaRestApiConstructdeaapicasesallcasesGET3D7FE7B4",
        "DeaRestApiConstructdeaapicasesallcasesOPTIONSA5C611C6",
        "DeaRestApiConstructdeaapicasesallcases5A486593",
        "DeaRestApiConstructdeaapicasesmycasesGETC5597167",
        "DeaRestApiConstructdeaapicasesmycasesOPTIONSE1C2DE04",
        "DeaRestApiConstructdeaapicasesmycases5E6BEFAC",
        "DeaRestApiConstructdeaapicasesOPTIONS6C23822B",
        "DeaRestApiConstructdeaapicasesPOST0A7C65AB",
        "DeaRestApiConstructdeaapicasesC2FD1C2B",
        "DeaRestApiConstructdeaapihiGETDB467AC2",
        "DeaRestApiConstructdeaapihiOPTIONSEFEA6225",
        "DeaRestApiConstructdeaapihi7D1B234E",
        "DeaRestApiConstructdeaapiOPTIONSE2FADC9C",
      ],
      "Properties": Object {
        "Description": "Backend API",
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "DeaRestApiConstructdeaapiDeploymentStagetest1A3F50BF": Object {
      "DependsOn": Array [
        "DeaRestApiConstructdeaapiAccount1E82C2B3",
      ],
      "Properties": Object {
        "AccessLogSetting": Object {
          "DestinationArn": Object {
            "Fn::GetAtt": Array [
              "DeaRestApiConstructAPIGatewayAccessLogs56D13F5D",
              "Arn",
            ],
          },
          "Format": "{\\"stage\\":\\"$context.stage\\",\\"requestId\\":\\"$context.requestId\\",\\"integrationRequestId\\":\\"$context.integration.requestId\\",\\"status\\":\\"$context.status\\",\\"apiId\\":\\"$context.apiId\\",\\"resourcePath\\":\\"$context.resourcePath\\",\\"path\\":\\"$context.path\\",\\"resourceId\\":\\"$context.resourceId\\",\\"httpMethod\\":\\"$context.httpMethod\\",\\"sourceIp\\":\\"$context.identity.sourceIp\\",\\"userAgent\\":\\"$context.identity.userAgent\\"}",
        },
        "DeploymentId": Object {
          "Ref": "DeaRestApiConstructdeaapiDeploymentC27C6CB156d6fbeb74213a0e8c887b386a894700",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
        "StageName": "test",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "DeaRestApiConstructdeaapiOPTIONSE2FADC9C": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": Object {
          "IntegrationResponses": Array [
            Object {
              "ResponseParameters": Object {
                "method.response.header.Access-Control-Allow-Credentials": "'true'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,CSRF-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST,PUT,PATCH,DELETE'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": Object {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": Array [
          Object {
            "ResponseParameters": Object {
              "method.response.header.Access-Control-Allow-Credentials": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeaapi6587DDA1",
            "RootResourceId",
          ],
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapibye9DFF71B3": Object {
      "Properties": Object {
        "ParentId": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeaapi6587DDA1",
            "RootResourceId",
          ],
        },
        "PathPart": "bye",
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "DeaRestApiConstructdeaapibyeGET3BEB4A0A": Object {
      "Properties": Object {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "DeaRestApiConstructGETbyeD5063377",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapibye9DFF71B3",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapibyeGETApiPermissionTestteststackDeaRestApiConstructdeaapi96FE45F4GETbyeB5A3F6C1": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructGETbyeD5063377",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/test-invoke-stage/GET/bye",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapibyeGETApiPermissionteststackDeaRestApiConstructdeaapi96FE45F4GETbyeCB20EC60": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructGETbyeD5063377",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/",
              Object {
                "Ref": "DeaRestApiConstructdeaapiDeploymentStagetest1A3F50BF",
              },
              "/GET/bye",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapibyeOPTIONS00A7A259": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": Object {
          "IntegrationResponses": Array [
            Object {
              "ResponseParameters": Object {
                "method.response.header.Access-Control-Allow-Credentials": "'true'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,CSRF-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST,PUT,PATCH,DELETE'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": Object {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": Array [
          Object {
            "ResponseParameters": Object {
              "method.response.header.Access-Control-Allow-Credentials": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapibye9DFF71B3",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapicasesC2FD1C2B": Object {
      "Properties": Object {
        "ParentId": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeaapi6587DDA1",
            "RootResourceId",
          ],
        },
        "PathPart": "cases",
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "DeaRestApiConstructdeaapicasesOPTIONS6C23822B": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": Object {
          "IntegrationResponses": Array [
            Object {
              "ResponseParameters": Object {
                "method.response.header.Access-Control-Allow-Credentials": "'true'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,CSRF-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST,PUT,PATCH,DELETE'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": Object {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": Array [
          Object {
            "ResponseParameters": Object {
              "method.response.header.Access-Control-Allow-Credentials": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapicasesC2FD1C2B",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapicasesPOST0A7C65AB": Object {
      "Properties": Object {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "POST",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "DeaRestApiConstructPOSTcases71FC396B",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapicasesC2FD1C2B",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapicasesPOSTApiPermissionTestteststackDeaRestApiConstructdeaapi96FE45F4POSTcasesB76BA281": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructPOSTcases71FC396B",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/test-invoke-stage/POST/cases",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasesPOSTApiPermissionteststackDeaRestApiConstructdeaapi96FE45F4POSTcases9AE2A82E": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructPOSTcases71FC396B",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/",
              Object {
                "Ref": "DeaRestApiConstructdeaapiDeploymentStagetest1A3F50BF",
              },
              "/POST/cases",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasesallcases5A486593": Object {
      "Properties": Object {
        "ParentId": Object {
          "Ref": "DeaRestApiConstructdeaapicasesC2FD1C2B",
        },
        "PathPart": "all-cases",
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "DeaRestApiConstructdeaapicasesallcasesGET3D7FE7B4": Object {
      "Properties": Object {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "RequestParameters": Object {
            "integration.request.querystring.limit": "method.request.querystring.limit",
            "integration.request.querystring.next": "method.request.querystring.next",
          },
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "DeaRestApiConstructGETallcases490E3EC5",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "RequestParameters": Object {
          "method.request.querystring.limit": false,
          "method.request.querystring.next": false,
        },
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapicasesallcases5A486593",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapicasesallcasesGETApiPermissionTestteststackDeaRestApiConstructdeaapi96FE45F4GETcasesallcases0A56C052": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructGETallcases490E3EC5",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/test-invoke-stage/GET/cases/all-cases",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasesallcasesGETApiPermissionteststackDeaRestApiConstructdeaapi96FE45F4GETcasesallcases8A384810": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructGETallcases490E3EC5",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/",
              Object {
                "Ref": "DeaRestApiConstructdeaapiDeploymentStagetest1A3F50BF",
              },
              "/GET/cases/all-cases",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasesallcasesOPTIONSA5C611C6": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": Object {
          "IntegrationResponses": Array [
            Object {
              "ResponseParameters": Object {
                "method.response.header.Access-Control-Allow-Credentials": "'true'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,CSRF-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST,PUT,PATCH,DELETE'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": Object {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": Array [
          Object {
            "ResponseParameters": Object {
              "method.response.header.Access-Control-Allow-Credentials": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapicasesallcases5A486593",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapicasescaseId5919A5AE": Object {
      "Properties": Object {
        "ParentId": Object {
          "Ref": "DeaRestApiConstructdeaapicasesC2FD1C2B",
        },
        "PathPart": "{caseId}",
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "DeaRestApiConstructdeaapicasescaseIdDELETEApiPermissionTestteststackDeaRestApiConstructdeaapi96FE45F4DELETEcasescaseIdF0BFC230": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructDELETEcaseIdE0E7560F",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/test-invoke-stage/DELETE/cases/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasescaseIdDELETEApiPermissionteststackDeaRestApiConstructdeaapi96FE45F4DELETEcasescaseId683887F7": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructDELETEcaseIdE0E7560F",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/",
              Object {
                "Ref": "DeaRestApiConstructdeaapiDeploymentStagetest1A3F50BF",
              },
              "/DELETE/cases/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasescaseIdDELETEE13D0EAA": Object {
      "Properties": Object {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "DELETE",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "DeaRestApiConstructDELETEcaseIdE0E7560F",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapicasescaseId5919A5AE",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapicasescaseIdGET31A0ADCB": Object {
      "Properties": Object {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "DeaRestApiConstructGETcaseId3B128BAD",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapicasescaseId5919A5AE",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapicasescaseIdGETApiPermissionTestteststackDeaRestApiConstructdeaapi96FE45F4GETcasescaseId9EC4CD2A": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructGETcaseId3B128BAD",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/test-invoke-stage/GET/cases/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasescaseIdGETApiPermissionteststackDeaRestApiConstructdeaapi96FE45F4GETcasescaseId3A6CC8C8": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructGETcaseId3B128BAD",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/",
              Object {
                "Ref": "DeaRestApiConstructdeaapiDeploymentStagetest1A3F50BF",
              },
              "/GET/cases/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasescaseIdOPTIONS28A51954": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": Object {
          "IntegrationResponses": Array [
            Object {
              "ResponseParameters": Object {
                "method.response.header.Access-Control-Allow-Credentials": "'true'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,CSRF-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST,PUT,PATCH,DELETE'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": Object {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": Array [
          Object {
            "ResponseParameters": Object {
              "method.response.header.Access-Control-Allow-Credentials": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapicasescaseId5919A5AE",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapicasescaseIdPUTApiPermissionTestteststackDeaRestApiConstructdeaapi96FE45F4PUTcasescaseId37A77CC0": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructPUTcaseId804DFA77",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/test-invoke-stage/PUT/cases/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasescaseIdPUTApiPermissionteststackDeaRestApiConstructdeaapi96FE45F4PUTcasescaseId6D37C013": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructPUTcaseId804DFA77",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/",
              Object {
                "Ref": "DeaRestApiConstructdeaapiDeploymentStagetest1A3F50BF",
              },
              "/PUT/cases/*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasescaseIdPUTDAF01FBF": Object {
      "Properties": Object {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "PUT",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "DeaRestApiConstructPUTcaseId804DFA77",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapicasescaseId5919A5AE",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapicasescaseIduserMembershipsD5C1FDF3": Object {
      "Properties": Object {
        "ParentId": Object {
          "Ref": "DeaRestApiConstructdeaapicasescaseId5919A5AE",
        },
        "PathPart": "userMemberships",
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "DeaRestApiConstructdeaapicasescaseIduserMembershipsOPTIONS8FB7464B": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": Object {
          "IntegrationResponses": Array [
            Object {
              "ResponseParameters": Object {
                "method.response.header.Access-Control-Allow-Credentials": "'true'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,CSRF-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST,PUT,PATCH,DELETE'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": Object {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": Array [
          Object {
            "ResponseParameters": Object {
              "method.response.header.Access-Control-Allow-Credentials": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapicasescaseIduserMembershipsD5C1FDF3",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapicasescaseIduserMembershipsPOST84A13ED4": Object {
      "Properties": Object {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "POST",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "DeaRestApiConstructPOSTuserMembershipsA9A79B32",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapicasescaseIduserMembershipsD5C1FDF3",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapicasescaseIduserMembershipsPOSTApiPermissionTestteststackDeaRestApiConstructdeaapi96FE45F4POSTcasescaseIduserMembershipsBD47C55D": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructPOSTuserMembershipsA9A79B32",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/test-invoke-stage/POST/cases/*/userMemberships",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasescaseIduserMembershipsPOSTApiPermissionteststackDeaRestApiConstructdeaapi96FE45F4POSTcasescaseIduserMemberships7500E258": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructPOSTuserMembershipsA9A79B32",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/",
              Object {
                "Ref": "DeaRestApiConstructdeaapiDeploymentStagetest1A3F50BF",
              },
              "/POST/cases/*/userMemberships",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasesmycases5E6BEFAC": Object {
      "Properties": Object {
        "ParentId": Object {
          "Ref": "DeaRestApiConstructdeaapicasesC2FD1C2B",
        },
        "PathPart": "my-cases",
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "DeaRestApiConstructdeaapicasesmycasesGETApiPermissionTestteststackDeaRestApiConstructdeaapi96FE45F4GETcasesmycasesC2E61486": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructGETmycasesF570E0D9",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/test-invoke-stage/GET/cases/my-cases",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasesmycasesGETApiPermissionteststackDeaRestApiConstructdeaapi96FE45F4GETcasesmycasesEA5EFE48": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructGETmycasesF570E0D9",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/",
              Object {
                "Ref": "DeaRestApiConstructdeaapiDeploymentStagetest1A3F50BF",
              },
              "/GET/cases/my-cases",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapicasesmycasesGETC5597167": Object {
      "Properties": Object {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "RequestParameters": Object {
            "integration.request.querystring.limit": "method.request.querystring.limit",
            "integration.request.querystring.next": "method.request.querystring.next",
          },
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "DeaRestApiConstructGETmycasesF570E0D9",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "RequestParameters": Object {
          "method.request.querystring.limit": false,
          "method.request.querystring.next": false,
        },
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapicasesmycases5E6BEFAC",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapicasesmycasesOPTIONSE1C2DE04": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": Object {
          "IntegrationResponses": Array [
            Object {
              "ResponseParameters": Object {
                "method.response.header.Access-Control-Allow-Credentials": "'true'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,CSRF-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST,PUT,PATCH,DELETE'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": Object {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": Array [
          Object {
            "ResponseParameters": Object {
              "method.response.header.Access-Control-Allow-Credentials": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapicasesmycases5E6BEFAC",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapihi7D1B234E": Object {
      "Properties": Object {
        "ParentId": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructdeaapi6587DDA1",
            "RootResourceId",
          ],
        },
        "PathPart": "hi",
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "DeaRestApiConstructdeaapihiGETApiPermissionTestteststackDeaRestApiConstructdeaapi96FE45F4GEThi9F62F9B4": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructGEThi76A71F55",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/test-invoke-stage/GET/hi",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapihiGETApiPermissionteststackDeaRestApiConstructdeaapi96FE45F4GEThi771DF2AF": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "DeaRestApiConstructGEThi76A71F55",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "DeaRestApiConstructdeaapi6587DDA1",
              },
              "/",
              Object {
                "Ref": "DeaRestApiConstructdeaapiDeploymentStagetest1A3F50BF",
              },
              "/GET/hi",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DeaRestApiConstructdeaapihiGETDB467AC2": Object {
      "Properties": Object {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": Object {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                Object {
                  "Fn::GetAtt": Array [
                    "DeaRestApiConstructGEThi76A71F55",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapihi7D1B234E",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeaapihiOPTIONSEFEA6225": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": Object {
          "IntegrationResponses": Array [
            Object {
              "ResponseParameters": Object {
                "method.response.header.Access-Control-Allow-Credentials": "'true'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,CSRF-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST,PUT,PATCH,DELETE'",
                "method.response.header.Access-Control-Allow-Origin": "'*'",
              },
              "StatusCode": "204",
            },
          ],
          "RequestTemplates": Object {
            "application/json": "{ statusCode: 200 }",
          },
          "Type": "MOCK",
        },
        "MethodResponses": Array [
          Object {
            "ResponseParameters": Object {
              "method.response.header.Access-Control-Allow-Credentials": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true,
            },
            "StatusCode": "204",
          },
        ],
        "ResourceId": Object {
          "Ref": "DeaRestApiConstructdeaapihi7D1B234E",
        },
        "RestApiId": Object {
          "Ref": "DeaRestApiConstructdeaapi6587DDA1",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DeaRestApiConstructdeabaselambdarole9EA2B06B": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DeaRestApiConstructdeabaselambdaroleDefaultPolicy8449FBB9": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "dynamodb:GetItem",
                "dynamodb:DeleteItem",
                "dynamodb:BatchGetItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:Query",
                "dynamodb:UpdateItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "DeaBackendConstructDeaTableB48721A0",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "DeaBackendConstructDeaTableB48721A0",
                          "Arn",
                        ],
                      },
                      "/index/GSI1",
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "DeaBackendConstructDeaTableB48721A0",
                          "Arn",
                        ],
                      },
                      "/index/GSI2",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "kms:Encrypt",
                "kms:Decrypt",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "testKey1CDDDD5E",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DeaRestApiConstructdeabaselambdaroleDefaultPolicy8449FBB9",
        "Roles": Array [
          Object {
            "Ref": "DeaRestApiConstructdeabaselambdarole9EA2B06B",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "testKey1CDDDD5E": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "EnableKeyRotation": true,
        "KeyPolicy": Object {
          "Statement": Array [
            Object {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PendingWindowInDays": 7,
      },
      "Type": "AWS::KMS::Key",
      "UpdateReplacePolicy": "Delete",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
