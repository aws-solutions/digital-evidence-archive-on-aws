swagger: '2.0'
info:
  version: 1.1.1
  title: DEA Data Vault API
paths:
  # root resource path entity must match the file name or the documentation will not get attached to the right API Gateweay resource
  # (e.g. openapi-auth.yml must only contain '/auth' and all child APIs)
  /datavaults:
    post:
      tags:
        - datavaults
      parameters:
        - in: body
          name: dataVaultObject
          description: Data Vault object to be created
          required: true
          schema:
            $ref: '#/definitions/CreateDataVaultObject'
      responses:
        200:
          description: Data Vault successfully created
          schema:
            $ref: '#/definitions/DataVault'
    get:
      summary: Get all data vaults
      description: returns list of data vaults
      tags:
        - datavaults
      parameters:
        - in: query
          name: limit
          type: integer
        - in: query
          name: next
          type: string
      responses:
        200:
          description: Success Response
          schema:
            type: object
            properties:
              datavaults:
                type: array
                items:
                  $ref: '#/definitions/DataVaults'
              next:
                type: string
  /datavaults/{dataVaultId}/details:
    get:
      summary: Return Data Vault details by Data Vault Id
      description: Get metadata for a specific data vault. return not found if user doesnâ€™t have access
      tags:
        - datavaults
      parameters:
        - in: path
          name: dataVaultId
          type: string
          required: true
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/DataVault'
    put:
      summary: Update data vault details
      tags:
        - datavaults
      parameters:
        - in: path
          name: dataVaultId
          type: string
          required: true
        - in: body
          name: dataVaultUpdateRequest
          required: true
          description: Data Vault object to be updated
          schema:
            $ref: '#/definitions/DataVaultUpdateRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/DataVault'
  /datavaults/{dataVaultId}/files:
    get:
      summary: list files by directory
      description: List files within a datavault in given file path or datavault root
      tags:
        - datavaults
      parameters:
        - in: path
          name: dataVaultId
          type: string
          required: true
        - in: query
          name: filePath
          type: string
        - in: query
          name: limit
          type: integer
        - in: query
          name: next
          type: string
      responses:
        200:
          description: Success
          schema:
            type: object
            properties:
              dataVaultFiles:
                type: array
                items:
                  $ref: '#/definitions/DataVaultFiles'
              next:
                type: string
  /datavaults/{dataVaultId}/caseAssociations:
    post:
      summary: Associate data vault file to case
      description: Creates a case file entry to associate data vault file to case
      tags:
        - datavaults
      parameters:
        - in: path
          name: dataVaultId
          type: string
          required: true
        - in: body
          name: caseAssociationRequest
          required: true
          schema:
            type: object
            required:
              - caseUlids
              - fileUlids
            properties:
              caseUlids:
                type: array
                items:
                  type: string
              fileUlids:
                type: array
                items:
                  type: string
      responses:
        200:
          description: Success
          schema:
            type: object
            properties:
              DataVaultFiles:
                type: array
                items:
                  $ref: '#/definitions/DataVaultFiles'
  /datavaults/{dataVaultId}/files/{fileId}/caseAssociations:
    delete:
      summary: Deletes case association
      tags:
        - datavaults
      parameters:
        - in: path
          name: dataVaultId
          type: string
          required: true
        - in: path
          name: fileId
          type: string
          required: true
        - in: body
          name: caseAssociationRequest
          required: true
          schema:
            type: object
            required:
              - caseUlids
            properties:
              caseUlids:
                type: array
                items:
                  type: string
      responses:
        200:
          description: Success
  /datavaults/{dataVaultId}/tasks:
    post:
      summary: Creates a data vault task
      tags:
        - datavaults
      parameters:
        - in: path
          name: dataVaultId
          type: string
          required: true
        - in: body
          name: dataVaultTaskObject
          required: true
          schema:
            $ref: '#/definitions/CreateDataVaultTaskObject'
      responses:
        200:
          description: Data Vault Task successfully created
          schema:
            $ref: '#/definitions/DataVaultTask'
  /datavaults/{dataVaultId}/files/{fileId}/info:
    get:
      summary: File details
      description: Get details for a file within a data vault
      tags:
        - datavaults
      parameters:
        - in: path
          name: dataVaultId
          type: string
          required: true
        - in: path
          name: fileId
          type: string
          required: true
      responses:
        200:
          description: Success Response
          schema:
            type: object
            properties:
              file:
                $ref: '#/definitions/DataVaultFile'
  /datavaults/tasks/{taskId}/executions:
    post:
      summary: Creates a data vault execution
      tags:
        - datavaults
      parameters:
        - in: path
          name: taskId
          type: string
          required: true
        - in: body
          name: dataVaultExecutionObject
          required: true
          schema:
            type: object
            required:
              - taskArn
            properties:
              taskArn:
                type: string
      responses:
        200:
          description: Data Vault Execution successfully created
          schema:
            $ref: '#/definitions/DataVaultExecution'
  /datavaults/{dataVaultId}/audit:
    post:
      summary: Generates audit log for Data vault ID
      operationId: requestDataVaultAudit
      tags:
        - audit
      parameters:
        - name: dataVaultId
          in: path
          description: Data vault ID to generate audit log for
          required: true
          type: string
        - in: body
          name: auditPayload
          required: false
          schema:
            $ref: '#/definitions/AuditPayload'
      responses:
        '200':
          description: Audit Query ID
          schema:
            type: object
            properties:
              auditId:
                type: string
  /datavaults/{dataVaultId}/files/{fileId}/audit:
    post:
      summary: Generates audit log for file ID at Data vault ID
      operationId: requestDataVaultFileAudit
      tags:
        - audit
      parameters:
        - name: dataVaultId
          in: path
          description: Data vault ID to generate audit log for
          required: true
          type: string
        - name: fileId
          in: path
          description: File ID to generate audit log for
          required: true
          type: string
        - in: body
          name: auditPayload
          description: Audit payload object
          required: false
          schema:
            $ref: '#/definitions/AuditPayload'
      responses:
        '200':
          description: Audit Query ID
          schema:
            type: object
            properties:
              auditId:
                type: string
  /datavaults/{dataVaultId}/audit/{auditId}/csv:
    get:
      summary: Returns audit log for a specific Data vault ID and audit log ID
      operationId: getDataVaultAudit
      tags:
        - audit
      parameters:
        - name: dataVaultId
          in: path
          description: Data Vault ID to return audit log entries for
          required: true
          type: string
        - name: auditId
          in: path
          description: Audit log ID
          required: true
          type: string
      responses:
        '200':
          description: Audit log CSV result and status
          schema:
            $ref: '#/definitions/AuditResult'
  /datavaults/{dataVaultId}/files/{fileId}/audit/{auditId}/csv:
    get:
      summary: Returns audit log for a specific file by file ID, Data vault ID, and audit log ID
      operationId: getDataVaultFileAudit
      tags:
        - audit
      parameters:
        - name: dataVaultId
          in: path
          description: DataVault ID to return audit log entries for
          required: true
          type: string
        - name: fileId
          in: path
          description: File ID to return audit log entries for
          required: true
          type: string
        - name: auditId
          in: path
          description: Audit log ID
          required: true
          type: string
      responses:
        '200':
          description: Audit log CSV result and status
          schema:
            $ref: '#/definitions/AuditResult'

definitions:
  AuditResult:
    type: object
    properties:
      status:
        type: string
        items:
          $ref: '#/definitions/QueryStatus'
      downloadUrl:
        type: string
  AuditPayload:
    type: object
    properties:
      from:
        type: number
      to:
        type: number
  DataVault:
    type: object
    properties:
      ulid:
        type: string
      name:
        type: string
      description:
        type: string
      objectCount:
        type: number
      totalSizeBytes:
        type: number
      created:
        type: string
      updated:
        type: string
  DataVaults:
    type: array
    items:
      $ref: '#/definitions/DataVault'
  DataVaultUpdateRequest:
    type: object
    required:
      - dataVaultName
      - dataVaultId
    properties:
      dataVaultId:
        type: string
      dataVaultName:
        type: string
      dataVaultDescription:
        type: string
  CreateDataVaultObject:
    type: object
    required:
      - name
      - description
    properties:
      name:
        type: string
        example: Cookie Stealing
      description:
        type: string
        example: Suspecting cookie monster stole all the cookies
  DataVaultFile:
    type: object
    properties:
      fileName:
        type: string
      filePath:
        type: string
      dataVaultUlid:
        type: string
      fileSizeBytes:
        type: number
      sha256Hash:
        type: string
      ulid:
        type: string
      versionId:
        type: string
      fileS3Key:
        type: string
      uploadId:
        type: string
      isFile:
        type: boolean
      contentType:
        type: string
      executionId:
        type: string
      created:
        type: string
      updated:
        type: string
      caseCount:
        type: number
      cases:
        type: array
        items:
          $ref: '#/definitions/ScopedCase'
  ScopedCase:
    type: object
    properties:
      ulid:
        type: string
      name:
        type: string
  DataVaultFiles:
    type: array
    items:
      $ref: '#/definitions/DataVaultFile'
  CreateDataVaultTaskObject:
    type: object
    required:
      - name
      - sourceLocationArn
      - destinationLocationArn
    properties:
      name:
        type: string
        example: Cookie Stealing
      description:
        type: string
        example: Suspecting cookie monster stole all the cookies
      sourceLocationArn:
        type: string
      destinationLocationArn:
        type: string
  DataVaultTask:
    type: object
    properties:
      taskId:
        type: string
      dataVaultUlid:
        type: string
      name:
        type: string
      description:
        type: string
      sourceLocationArn:
        type: string
      destinationLocationArn:
        type: string
      taskArn:
        type: number
      created:
        type: string
      updated:
        type: string
      deleted:
        type: boolean
  DataVaultExecution:
    type: object
    properties:
      taskId:
        type: string
      executionId:
        type: string
      createdBy:
        type: string
      created:
        type: string
  QueryStatus:
    type: string
    enum: [Cancelled, Complete, Failed, Running, Scheduled, Timeout, Unknown]
